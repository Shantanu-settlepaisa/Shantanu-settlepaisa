version: '3.8'

services:
  # SFTP Server for Bank File Ingestion
  sftp:
    image: atmoz/sftp:alpine
    container_name: ops-sftp
    ports:
      - "${SFTP_PORT:-2222}:22"
    volumes:
      - ./demo/sftp:/home/${SFTP_USER:-sp-sftp}
    environment:
      - SFTP_USERS=${SFTP_USER:-sp-sftp}:${SFTP_PASS:-sp-sftp}:1001
    networks:
      - ops-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ops-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ops_dashboard
      POSTGRES_USER: ops_user
      POSTGRES_PASSWORD: ops_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ops_user -d ops_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Job Queue
  redis:
    image: redis:7-alpine
    container_name: ops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: ops-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio_admin
      MINIO_ROOT_PASSWORD: minio_password
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - ops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # LocalStack for AWS services (KMS for secrets)
  localstack:
    image: localstack/localstack:latest
    container_name: ops-localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=kms,secretsmanager
      - DEFAULT_REGION=ap-south-1
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - localstack-data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ops-network
    restart: unless-stopped

  # Mock PG API for demo
  mock-pg-api:
    build: ./services/mock-pg-api
    container_name: mock-pg-api
    ports:
      - "5101:5101"
    environment:
      - PORT=5101
      - NODE_ENV=development
    volumes:
      - ./services/mock-pg-api:/app
      - /app/node_modules
    networks:
      - ops-network
    restart: unless-stopped

  # Mock Bank API for demo
  mock-bank-api:
    build: ./services/mock-bank-api
    container_name: mock-bank-api
    ports:
      - "5102:5102"
    environment:
      - PORT=5102
      - NODE_ENV=development
    volumes:
      - ./services/mock-bank-api:/app
      - /app/node_modules
    networks:
      - ops-network
    restart: unless-stopped

  # Reconciliation API service
  recon-api:
    build: ./services/recon-api
    container_name: recon-api
    ports:
      - "5103:5103"
    depends_on:
      - mock-pg-api
      - mock-bank-api
    environment:
      - PORT=5103
      - NODE_ENV=development
    networks:
      - ops-network
    restart: unless-stopped

  # Overview API service for consistent metrics
  overview-api:
    build: ./services/overview-api
    container_name: overview-api
    ports:
      - "5104:5104"
    depends_on:
      - recon-api
      - mock-pg-api
      - mock-bank-api
    environment:
      - PORT=5104
      - NODE_ENV=development
    networks:
      - ops-network
    restart: unless-stopped

networks:
  ops-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  minio-data:
  localstack-data: