{
  "tables": {
    "merchants": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "merchant_code",
          "VARCHAR(50)"
        ],
        [
          "merchant_name",
          "VARCHAR(255)"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "banks": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "bank_code",
          "VARCHAR(10)"
        ],
        [
          "bank_name",
          "VARCHAR(100)"
        ],
        [
          "swift_code",
          "VARCHAR(11)"
        ],
        [
          "country_code",
          "CHAR(2)"
        ],
        [
          "is_active",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "bank_connectors": {
      "columns": [
        [
          "SFTP/API",
          "connections)"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "bank_id",
          "UUID"
        ],
        [
          "connector_name",
          "VARCHAR(100)"
        ],
        [
          "connector_type",
          "VARCHAR(10)"
        ],
        [
          "connection_config",
          "JSONB,"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "last_sync_at",
          "TIMESTAMP"
        ],
        [
          "sync_frequency_minutes",
          "INTEGER"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "transactions": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "--",
          "Transaction"
        ],
        [
          "transaction_id",
          "VARCHAR(100)"
        ],
        [
          "utr",
          "VARCHAR(50),"
        ],
        [
          "rrn",
          "VARCHAR(50),"
        ],
        [
          "--",
          "Transaction"
        ],
        [
          "merchant_id",
          "UUID"
        ],
        [
          "amount_paise",
          "BIGINT"
        ],
        [
          "currency",
          "CHAR(3)"
        ],
        [
          "--",
          "Dates"
        ],
        [
          "transaction_date",
          "DATE"
        ],
        [
          "transaction_time",
          "TIMESTAMP"
        ],
        [
          "captured_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Settlement"
        ],
        [
          "pipeline_status",
          "VARCHAR(20)"
        ],
        [
          "pipeline_status",
          "IN"
        ],
        [
          ")",
          ""
        ],
        [
          "settlement_date",
          "DATE"
        ],
        [
          "credited_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Bank"
        ],
        [
          "bank_id",
          "UUID"
        ],
        [
          "bank_account_number",
          "VARCHAR(50)"
        ],
        [
          "ifsc_code",
          "VARCHAR(11)"
        ],
        [
          "--",
          "Data"
        ],
        [
          "data_source",
          "VARCHAR(20)"
        ],
        [
          "source_connector_id",
          "UUID"
        ],
        [
          "--",
          "Metadata"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Indexes"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "bank_statements": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "--",
          "File"
        ],
        [
          "bank_id",
          "UUID"
        ],
        [
          "connector_id",
          "UUID"
        ],
        [
          "statement_date",
          "DATE"
        ],
        [
          "file_name",
          "VARCHAR(255)"
        ],
        [
          "file_hash",
          "VARCHAR(64),"
        ],
        [
          "--",
          "Processing"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "status",
          "IN"
        ],
        [
          ")",
          ""
        ],
        [
          "total_records",
          "INTEGER"
        ],
        [
          "processed_records",
          "INTEGER"
        ],
        [
          "--",
          "Timing"
        ],
        [
          "received_at",
          "TIMESTAMP"
        ],
        [
          "processed_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Raw"
        ],
        [
          "raw_content",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "bank_statement_entries": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "--",
          "Link"
        ],
        [
          "statement_id",
          "UUID"
        ],
        [
          "line_number",
          "INTEGER"
        ],
        [
          "--",
          "Bank"
        ],
        [
          "utr",
          "VARCHAR(50)"
        ],
        [
          "amount_paise",
          "BIGINT"
        ],
        [
          "transaction_date",
          "DATE"
        ],
        [
          "description",
          "TEXT"
        ],
        [
          "debit_credit",
          "CHAR(1)"
        ],
        [
          "balance_paise",
          "BIGINT"
        ],
        [
          "--",
          "Reconciliation"
        ],
        [
          "is_matched",
          "BOOLEAN"
        ],
        [
          "matched_transaction_id",
          "UUID"
        ],
        [
          "match_confidence",
          "DECIMAL(5,2),"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "reconciliation_matches": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "--",
          "What's"
        ],
        [
          "transaction_id",
          "UUID"
        ],
        [
          "bank_entry_id",
          "UUID"
        ],
        [
          "--",
          "Match"
        ],
        [
          "match_type",
          "VARCHAR(20)"
        ],
        [
          "match_type",
          "IN"
        ],
        [
          ")",
          ""
        ],
        [
          "match_confidence",
          "DECIMAL(5,2)"
        ],
        [
          "match_score",
          "JSONB,"
        ],
        [
          "--",
          "Status"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "status",
          "IN"
        ],
        [
          ")",
          ""
        ],
        [
          "--",
          "Audit"
        ],
        [
          "matched_by",
          "VARCHAR(20)"
        ],
        [
          "matched_by_user_id",
          "UUID,"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "confirmed_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "exception_reasons": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "reason_code",
          "VARCHAR(50)"
        ],
        [
          "reason_label",
          "VARCHAR(100)"
        ],
        [
          "severity",
          "VARCHAR(10)"
        ],
        [
          "description",
          "TEXT"
        ],
        [
          "is_active",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "reconciliation_exceptions": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "--",
          "What"
        ],
        [
          "transaction_id",
          "UUID"
        ],
        [
          "bank_entry_id",
          "UUID"
        ],
        [
          "--",
          "Exception"
        ],
        [
          "reason_id",
          "UUID"
        ],
        [
          "severity",
          "VARCHAR(10)"
        ],
        [
          "--",
          "Status"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "status",
          "IN"
        ],
        [
          ")",
          ""
        ],
        [
          "--",
          "Assignment"
        ],
        [
          "assigned_to",
          "UUID,"
        ],
        [
          "assigned_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Resolution"
        ],
        [
          "resolution_notes",
          "TEXT"
        ],
        [
          "resolved_by",
          "UUID,"
        ],
        [
          "resolved_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Additional"
        ],
        [
          "exception_data",
          "JSONB,"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ],
        [
          "transaction_id",
          "IS"
        ],
        [
          ")",
          ""
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "connector_sync_logs": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "connector_id",
          "UUID"
        ],
        [
          "sync_started_at",
          "TIMESTAMP"
        ],
        [
          "sync_completed_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Results"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "status",
          "IN"
        ],
        [
          ")",
          ""
        ],
        [
          "files_found",
          "INTEGER"
        ],
        [
          "files_processed",
          "INTEGER"
        ],
        [
          "records_processed",
          "INTEGER"
        ],
        [
          "--",
          "Error"
        ],
        [
          "error_message",
          "TEXT"
        ],
        [
          "error_details",
          "JSONB"
        ],
        [
          "--",
          "Performance"
        ],
        [
          "duration_seconds",
          "INTEGER"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "system_settings": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "setting_key",
          "VARCHAR(100)"
        ],
        [
          "setting_value",
          "TEXT"
        ],
        [
          "setting_type",
          "VARCHAR(20)"
        ],
        [
          "setting_type",
          "IN"
        ],
        [
          ")",
          ""
        ],
        [
          "description",
          "TEXT"
        ],
        [
          "is_sensitive",
          "BOOLEAN"
        ],
        [
          "updated_by",
          "UUID,"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from database/schema.sql"
    },
    "data_source": {
      "columns": [
        [
          "Connectors)",
          ""
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "source_id",
          "VARCHAR(50)"
        ],
        [
          "name",
          "VARCHAR(100)"
        ],
        [
          "type",
          "VARCHAR(20)"
        ],
        [
          "merchant_id",
          "VARCHAR(50)"
        ],
        [
          "acquirer_code",
          "VARCHAR(20)"
        ],
        [
          "path_or_endpoint",
          "TEXT"
        ],
        [
          "file_glob",
          "VARCHAR(100)"
        ],
        [
          "http_method",
          "VARCHAR(10)"
        ],
        [
          "headers_json",
          "JSONB"
        ],
        [
          "mapping_template_id",
          "VARCHAR(50)"
        ],
        [
          "timezone",
          "VARCHAR(50)"
        ],
        [
          "is_enabled",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "data_source_secret": {
      "columns": [
        [
          "KMS-encrypted)",
          ""
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "secret_id",
          "UUID"
        ],
        [
          "source_id",
          "VARCHAR(50)"
        ],
        [
          "secret_type",
          "VARCHAR(20)"
        ],
        [
          "encrypted_value",
          "TEXT"
        ],
        [
          "kms_key_id",
          "VARCHAR(100)"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "ingest_schedule": {
      "columns": [
        [
          "schedule_id",
          "UUID"
        ],
        [
          "source_id",
          "VARCHAR(50)"
        ],
        [
          "cron_expr",
          "VARCHAR(50)"
        ],
        [
          "next_run_at",
          "TIMESTAMP"
        ],
        [
          "last_run_at",
          "TIMESTAMP"
        ],
        [
          "is_paused",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "ingest_job": {
      "columns": [
        [
          "job_id",
          "UUID"
        ],
        [
          "source_id",
          "VARCHAR(50)"
        ],
        [
          "cycle_date",
          "DATE"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "attempt",
          "INT"
        ],
        [
          "max_attempt",
          "INT"
        ],
        [
          "artifact_uri",
          "TEXT,"
        ],
        [
          "rows_ingested",
          "INT"
        ],
        [
          "bytes_ingested",
          "BIGINT"
        ],
        [
          "error_message",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "started_at",
          "TIMESTAMP"
        ],
        [
          "completed_at",
          "TIMESTAMP"
        ],
        [
          "duration_ms",
          "INT"
        ],
        [
          "CASE",
          ""
        ],
        [
          "WHEN",
          "completed_at"
        ],
        [
          "THEN",
          "EXTRACT(EPOCH"
        ],
        [
          "ELSE",
          "NULL"
        ],
        [
          "END",
          ""
        ],
        [
          ")",
          "STORED"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "ingest_event": {
      "columns": [
        [
          "audit",
          "log)"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "event_id",
          "UUID"
        ],
        [
          "job_id",
          "UUID"
        ],
        [
          "kind",
          "VARCHAR(20)"
        ],
        [
          "payload",
          "JSONB"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "recon_job": {
      "columns": [
        [
          "job_id",
          "UUID"
        ],
        [
          "cycle_date",
          "DATE"
        ],
        [
          "pg_file_path",
          "TEXT"
        ],
        [
          "bank_file_path",
          "TEXT"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "pg_total_amount",
          "BIGINT,"
        ],
        [
          "bank_total_amount",
          "BIGINT,"
        ],
        [
          "matched_count",
          "INT"
        ],
        [
          "unmatched_pg_count",
          "INT"
        ],
        [
          "unmatched_bank_count",
          "INT"
        ],
        [
          "matched_amount",
          "BIGINT"
        ],
        [
          "variance_amount",
          "BIGINT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ],
        [
          "completed_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "normalized_transaction": {
      "columns": [
        [
          "txn_id",
          "UUID"
        ],
        [
          "job_id",
          "UUID"
        ],
        [
          "source",
          "VARCHAR(10)"
        ],
        [
          "transaction_id",
          "VARCHAR(100)"
        ],
        [
          "amount",
          "BIGINT"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "transaction_date",
          "DATE"
        ],
        [
          "merchant_ref",
          "VARCHAR(100)"
        ],
        [
          "bank_ref",
          "VARCHAR(100)"
        ],
        [
          "raw_data",
          "JSONB,"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "INDEX",
          "idx_job_source"
        ],
        [
          "INDEX",
          "idx_transaction_id"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "recon_match": {
      "columns": [
        [
          "match_id",
          "UUID"
        ],
        [
          "job_id",
          "UUID"
        ],
        [
          "pg_txn_id",
          "UUID"
        ],
        [
          "bank_txn_id",
          "UUID"
        ],
        [
          "match_type",
          "VARCHAR(20)"
        ],
        [
          "confidence_score",
          "DECIMAL(3,2),"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "recon_unmatched": {
      "columns": [
        [
          "unmatched_id",
          "UUID"
        ],
        [
          "job_id",
          "UUID"
        ],
        [
          "txn_id",
          "UUID"
        ],
        [
          "source",
          "VARCHAR(10)"
        ],
        [
          "reason",
          "VARCHAR(100)"
        ],
        [
          "resolution_status",
          "VARCHAR(20)"
        ],
        [
          "resolution_notes",
          "TEXT"
        ],
        [
          "resolved_by",
          "VARCHAR(100)"
        ],
        [
          "resolved_at",
          "TIMESTAMP"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "bank_schema": {
      "columns": [
        [
          "schema_id",
          "VARCHAR(50)"
        ],
        [
          "bank_name",
          "VARCHAR(100)"
        ],
        [
          "schema_name",
          "VARCHAR(100)"
        ],
        [
          "field_mappings",
          "JSONB"
        ],
        [
          "validation_rules",
          "JSONB"
        ],
        [
          "is_active",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "recon_connector": {
      "columns": [
        [
          "OP-0008)",
          ""
        ],
        [
          "--",
          "====================================================="
        ],
        [
          "--",
          "Connector"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "name",
          "TEXT"
        ],
        [
          "type",
          "TEXT"
        ],
        [
          "provider",
          "TEXT"
        ],
        [
          "merchant_id",
          "UUID"
        ],
        [
          "acquirer_code",
          "TEXT"
        ],
        [
          "config",
          "JSONB"
        ],
        [
          "mapping_template_id",
          "UUID"
        ],
        [
          "status",
          "TEXT"
        ],
        [
          "last_run_at",
          "TIMESTAMPTZ"
        ],
        [
          "last_ok_at",
          "TIMESTAMPTZ"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ],
        [
          "created_by",
          "UUID"
        ],
        [
          "updated_by",
          "UUID"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "recon_connector_run": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "connector_id",
          "UUID"
        ],
        [
          "cycle_date",
          "DATE"
        ],
        [
          "started_at",
          "TIMESTAMPTZ"
        ],
        [
          "finished_at",
          "TIMESTAMPTZ"
        ],
        [
          "outcome",
          "TEXT"
        ],
        [
          "files_discovered",
          "INTEGER"
        ],
        [
          "files_downloaded",
          "INTEGER"
        ],
        [
          "recon_job_id",
          "UUID"
        ],
        [
          "error",
          "TEXT"
        ],
        [
          "metrics",
          "JSONB,"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "recon_ingested_file": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "connector_id",
          "UUID"
        ],
        [
          "connector_run_id",
          "UUID"
        ],
        [
          "cycle_date",
          "DATE"
        ],
        [
          "remote_path",
          "TEXT"
        ],
        [
          "local_uri",
          "TEXT,"
        ],
        [
          "sha256",
          "TEXT"
        ],
        [
          "pgp_verified",
          "BOOLEAN"
        ],
        [
          "file_bytes",
          "BIGINT"
        ],
        [
          "dedupe_key",
          "TEXT"
        ],
        [
          "state",
          "TEXT"
        ],
        [
          "error",
          "TEXT"
        ],
        [
          "recon_file_id",
          "UUID"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "report_schedule": {
      "columns": [
        [
          "OP-0009)",
          ""
        ],
        [
          "--",
          "====================================================="
        ],
        [
          "--",
          "Report"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "type",
          "TEXT"
        ],
        [
          "filters",
          "JSONB"
        ],
        [
          "cadence_cron",
          "TEXT"
        ],
        [
          "timezone",
          "TEXT"
        ],
        [
          "format",
          "TEXT"
        ],
        [
          "delivery",
          "TEXT"
        ],
        [
          "recipients",
          "TEXT[]"
        ],
        [
          "s3_prefix",
          "TEXT"
        ],
        [
          "is_enabled",
          "BOOLEAN"
        ],
        [
          "last_run_at",
          "TIMESTAMP"
        ],
        [
          "last_run_status",
          "TEXT"
        ],
        [
          "next_run_at",
          "TIMESTAMP"
        ],
        [
          "created_by",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "report_export_audit": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "report_type",
          "TEXT"
        ],
        [
          "filters",
          "JSONB"
        ],
        [
          "format",
          "TEXT"
        ],
        [
          "generated_by",
          "TEXT"
        ],
        [
          "generated_at",
          "TIMESTAMP"
        ],
        [
          "object_key",
          "TEXT"
        ],
        [
          "file_size_bytes",
          "BIGINT"
        ],
        [
          "row_count",
          "INTEGER"
        ],
        [
          "signature",
          "TEXT"
        ],
        [
          "signed_url",
          "TEXT"
        ],
        [
          "expires_at",
          "TIMESTAMP"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/init.sql"
    },
    "sp_v2_transactions": {
      "columns": [
        [
          "from",
          "Manual"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "transaction_id",
          "VARCHAR(100)"
        ],
        [
          "merchant_id",
          "VARCHAR(50)"
        ],
        [
          "amount_paise",
          "BIGINT"
        ],
        [
          "currency",
          "VARCHAR(3)"
        ],
        [
          "transaction_date",
          "DATE"
        ],
        [
          "transaction_timestamp",
          "TIMESTAMP"
        ],
        [
          "--",
          "Source"
        ],
        [
          "source_type",
          "VARCHAR(20)"
        ],
        [
          "source_name",
          "VARCHAR(100),"
        ],
        [
          "batch_id",
          "VARCHAR(100)"
        ],
        [
          "--",
          "Payment"
        ],
        [
          "payment_method",
          "VARCHAR(50)"
        ],
        [
          "gateway_ref",
          "VARCHAR(100)"
        ],
        [
          "utr",
          "VARCHAR(50)"
        ],
        [
          "rrn",
          "VARCHAR(50)"
        ],
        [
          "--",
          "Status"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Will"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "transaction_id",
          "VARCHAR(100)"
        ],
        [
          "merchant_id",
          "VARCHAR(50)"
        ],
        [
          "amount_paise",
          "BIGINT"
        ],
        [
          "currency",
          "VARCHAR(3)"
        ],
        [
          "transaction_date",
          "DATE"
        ],
        [
          "transaction_timestamp",
          "TIMESTAMP"
        ],
        [
          "source_type",
          "VARCHAR(20)"
        ],
        [
          "source_name",
          "VARCHAR(100)"
        ],
        [
          "batch_id",
          "VARCHAR(100)"
        ],
        [
          "payment_method",
          "VARCHAR(50)"
        ],
        [
          "gateway_ref",
          "VARCHAR(100)"
        ],
        [
          "utr",
          "VARCHAR(50)"
        ],
        [
          "rrn",
          "VARCHAR(50)"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_create_v2_schema.sql"
    },
    "sp_v2_bank_statements": {
      "columns": [
        [
          "from",
          "Manual"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "bank_ref",
          "VARCHAR(100)"
        ],
        [
          "bank_name",
          "VARCHAR(100)"
        ],
        [
          "amount_paise",
          "BIGINT"
        ],
        [
          "transaction_date",
          "DATE"
        ],
        [
          "value_date",
          "DATE"
        ],
        [
          "--",
          "Bank"
        ],
        [
          "utr",
          "VARCHAR(50)"
        ],
        [
          "remarks",
          "TEXT"
        ],
        [
          "debit_credit",
          "VARCHAR(10)"
        ],
        [
          "--",
          "Source"
        ],
        [
          "source_type",
          "VARCHAR(20)"
        ],
        [
          "source_file",
          "VARCHAR(255)"
        ],
        [
          "batch_id",
          "VARCHAR(100)"
        ],
        [
          "--",
          "Processing"
        ],
        [
          "processed",
          "BOOLEAN"
        ],
        [
          "matched_transaction_id",
          "VARCHAR(100)"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "bank_ref",
          "VARCHAR(100)"
        ],
        [
          "bank_name",
          "VARCHAR(100)"
        ],
        [
          "amount_paise",
          "BIGINT"
        ],
        [
          "transaction_date",
          "DATE"
        ],
        [
          "value_date",
          "DATE"
        ],
        [
          "utr",
          "VARCHAR(50)"
        ],
        [
          "remarks",
          "TEXT"
        ],
        [
          "debit_credit",
          "VARCHAR(10)"
        ],
        [
          "source_type",
          "VARCHAR(20)"
        ],
        [
          "source_file",
          "VARCHAR(255)"
        ],
        [
          "batch_id",
          "VARCHAR(100)"
        ],
        [
          "processed",
          "BOOLEAN"
        ],
        [
          "matched_transaction_id",
          "VARCHAR(100)"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_create_v2_schema.sql"
    },
    "sp_v2_reconciliation_jobs": {
      "columns": [
        [
          "Powers",
          "KPI"
        ],
        [
          "--",
          "============================================================================="
        ],
        [
          "--",
          "Reconciliation"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "job_id",
          "VARCHAR(100)"
        ],
        [
          "job_name",
          "VARCHAR(255)"
        ],
        [
          "--",
          "Job"
        ],
        [
          "date_from",
          "DATE"
        ],
        [
          "date_to",
          "DATE"
        ],
        [
          "source_types",
          "TEXT[],"
        ],
        [
          "--",
          "Job"
        ],
        [
          "total_pg_records",
          "INTEGER"
        ],
        [
          "total_bank_records",
          "INTEGER"
        ],
        [
          "matched_records",
          "INTEGER"
        ],
        [
          "unmatched_pg",
          "INTEGER"
        ],
        [
          "unmatched_bank",
          "INTEGER"
        ],
        [
          "exception_records",
          "INTEGER"
        ],
        [
          "--",
          "Financial"
        ],
        [
          "total_amount_paise",
          "BIGINT"
        ],
        [
          "reconciled_amount_paise",
          "BIGINT"
        ],
        [
          "variance_amount_paise",
          "BIGINT"
        ],
        [
          "--",
          "Processing"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "processing_start",
          "TIMESTAMP"
        ],
        [
          "processing_end",
          "TIMESTAMP"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "job_id",
          "VARCHAR(100)"
        ],
        [
          "job_name",
          "VARCHAR(255)"
        ],
        [
          "date_from",
          "DATE"
        ],
        [
          "date_to",
          "DATE"
        ],
        [
          "source_types",
          "TEXT[]"
        ],
        [
          "total_pg_records",
          "INTEGER"
        ],
        [
          "total_bank_records",
          "INTEGER"
        ],
        [
          "matched_records",
          "INTEGER"
        ],
        [
          "unmatched_pg",
          "INTEGER"
        ],
        [
          "unmatched_bank",
          "INTEGER"
        ],
        [
          "exception_records",
          "INTEGER"
        ],
        [
          "total_amount_paise",
          "BIGINT"
        ],
        [
          "reconciled_amount_paise",
          "BIGINT"
        ],
        [
          "variance_amount_paise",
          "BIGINT"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "processing_start",
          "TIMESTAMP"
        ],
        [
          "processing_end",
          "TIMESTAMP"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_create_v2_schema.sql"
    },
    "sp_v2_reconciliation_results": {
      "columns": [
        [
          "detailed",
          "match/exception"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "job_id",
          "VARCHAR(100)"
        ],
        [
          "--",
          "Transaction"
        ],
        [
          "pg_transaction_id",
          "VARCHAR(100)"
        ],
        [
          "bank_statement_id",
          "BIGINT"
        ],
        [
          "--",
          "Match"
        ],
        [
          "match_status",
          "VARCHAR(20)"
        ],
        [
          "match_score",
          "DECIMAL(5,2),"
        ],
        [
          "--",
          "Exception"
        ],
        [
          "exception_reason_code",
          "VARCHAR(50)"
        ],
        [
          "exception_severity",
          "VARCHAR(20)"
        ],
        [
          "exception_message",
          "TEXT"
        ],
        [
          "--",
          "Amounts"
        ],
        [
          "pg_amount_paise",
          "BIGINT"
        ],
        [
          "bank_amount_paise",
          "BIGINT"
        ],
        [
          "variance_paise",
          "BIGINT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "job_id",
          "VARCHAR(100)"
        ],
        [
          "pg_transaction_id",
          "VARCHAR(100)"
        ],
        [
          "bank_statement_id",
          "BIGINT"
        ],
        [
          "match_status",
          "VARCHAR(20)"
        ],
        [
          "match_score",
          "DECIMAL(5,2)"
        ],
        [
          "exception_reason_code",
          "VARCHAR(50)"
        ],
        [
          "exception_severity",
          "VARCHAR(20)"
        ],
        [
          "exception_message",
          "TEXT"
        ],
        [
          "pg_amount_paise",
          "BIGINT"
        ],
        [
          "bank_amount_paise",
          "BIGINT"
        ],
        [
          "variance_paise",
          "BIGINT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_create_v2_schema.sql"
    },
    "sp_v2_exception_reasons": {
      "columns": [
        [
          "Powers",
          "Exception"
        ],
        [
          "--",
          "============================================================================="
        ],
        [
          "--",
          "Exception"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "SERIAL"
        ],
        [
          "reason_code",
          "VARCHAR(50)"
        ],
        [
          "reason_label",
          "VARCHAR(255)"
        ],
        [
          "description",
          "TEXT"
        ],
        [
          "default_severity",
          "VARCHAR(20)"
        ],
        [
          "is_active",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "id",
          "SERIAL"
        ],
        [
          "reason_code",
          "VARCHAR(50)"
        ],
        [
          "reason_label",
          "VARCHAR(255)"
        ],
        [
          "description",
          "TEXT"
        ],
        [
          "default_severity",
          "VARCHAR(20)"
        ],
        [
          "is_active",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_create_v2_schema.sql"
    },
    "sp_v2_exceptions_summary": {
      "columns": [
        [
          "aggregated",
          "for"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "summary_date",
          "DATE"
        ],
        [
          "reason_code",
          "VARCHAR(50)"
        ],
        [
          "severity",
          "VARCHAR(20)"
        ],
        [
          "--",
          "Counts"
        ],
        [
          "exception_count",
          "INTEGER"
        ],
        [
          "total_amount_paise",
          "BIGINT"
        ],
        [
          "--",
          "Source"
        ],
        [
          "manual_upload_count",
          "INTEGER"
        ],
        [
          "connector_count",
          "INTEGER"
        ],
        [
          "last_updated",
          "TIMESTAMP"
        ],
        [
          "--",
          "Constraints"
        ],
        [
          "INDEX",
          "idx_exception_summary_date"
        ],
        [
          "INDEX",
          "idx_exception_summary_severity"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "summary_date",
          "DATE"
        ],
        [
          "reason_code",
          "VARCHAR(50)"
        ],
        [
          "severity",
          "VARCHAR(20)"
        ],
        [
          "exception_count",
          "INTEGER"
        ],
        [
          "total_amount_paise",
          "BIGINT"
        ],
        [
          "manual_upload_count",
          "INTEGER"
        ],
        [
          "connector_count",
          "INTEGER"
        ],
        [
          "last_updated",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_create_v2_schema.sql"
    },
    "sp_v2_connectors": {
      "columns": [
        [
          "Powers",
          "Connector"
        ],
        [
          "--",
          "============================================================================="
        ],
        [
          "--",
          "Connector"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "SERIAL"
        ],
        [
          "connector_name",
          "VARCHAR(100)"
        ],
        [
          "connector_type",
          "VARCHAR(50)"
        ],
        [
          "--",
          "Configuration"
        ],
        [
          "is_active",
          "BOOLEAN"
        ],
        [
          "bank_name",
          "VARCHAR(100)"
        ],
        [
          "description",
          "TEXT"
        ],
        [
          "--",
          "Health"
        ],
        [
          "last_sync_at",
          "TIMESTAMP"
        ],
        [
          "last_successful_sync",
          "TIMESTAMP"
        ],
        [
          "sync_frequency_minutes",
          "INTEGER"
        ],
        [
          "--",
          "Status"
        ],
        [
          "health_status",
          "VARCHAR(20)"
        ],
        [
          "last_error_message",
          "TEXT"
        ],
        [
          "last_health_check",
          "TIMESTAMP"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "INDEX",
          "idx_connectors_active"
        ],
        [
          "INDEX",
          "idx_connectors_health"
        ],
        [
          "id",
          "SERIAL"
        ],
        [
          "connector_name",
          "VARCHAR(100)"
        ],
        [
          "connector_type",
          "VARCHAR(50)"
        ],
        [
          "is_active",
          "BOOLEAN"
        ],
        [
          "bank_name",
          "VARCHAR(100)"
        ],
        [
          "description",
          "TEXT"
        ],
        [
          "last_sync_at",
          "TIMESTAMP"
        ],
        [
          "last_successful_sync",
          "TIMESTAMP"
        ],
        [
          "sync_frequency_minutes",
          "INTEGER"
        ],
        [
          "health_status",
          "VARCHAR(20)"
        ],
        [
          "last_error_message",
          "TEXT"
        ],
        [
          "last_health_check",
          "TIMESTAMP"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_create_v2_schema.sql"
    },
    "sp_v2_connector_sync_history": {
      "columns": [
        [
          "for",
          "lag"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "connector_id",
          "INTEGER"
        ],
        [
          "--",
          "Sync"
        ],
        [
          "sync_timestamp",
          "TIMESTAMP"
        ],
        [
          "sync_status",
          "VARCHAR(20)"
        ],
        [
          "--",
          "Data"
        ],
        [
          "records_processed",
          "INTEGER"
        ],
        [
          "records_failed",
          "INTEGER"
        ],
        [
          "file_name",
          "VARCHAR(255)"
        ],
        [
          "file_size_bytes",
          "BIGINT"
        ],
        [
          "--",
          "Processing"
        ],
        [
          "processing_duration_ms",
          "INTEGER"
        ],
        [
          "error_message",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "INDEX",
          "idx_sync_history_connector"
        ],
        [
          "INDEX",
          "idx_sync_history_timestamp"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "connector_id",
          "INTEGER"
        ],
        [
          "sync_timestamp",
          "TIMESTAMP"
        ],
        [
          "sync_status",
          "VARCHAR(20)"
        ],
        [
          "records_processed",
          "INTEGER"
        ],
        [
          "records_failed",
          "INTEGER"
        ],
        [
          "file_name",
          "VARCHAR(255)"
        ],
        [
          "file_size_bytes",
          "BIGINT"
        ],
        [
          "processing_duration_ms",
          "INTEGER"
        ],
        [
          "error_message",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_create_v2_schema.sql"
    },
    "sp_v2_settlements": {
      "columns": [
        [
          "Powers",
          "Settlement"
        ],
        [
          "--",
          "============================================================================="
        ],
        [
          "--",
          "Settlement"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "settlement_id",
          "VARCHAR(100)"
        ],
        [
          "merchant_id",
          "VARCHAR(50)"
        ],
        [
          "--",
          "Settlement"
        ],
        [
          "settlement_date",
          "DATE"
        ],
        [
          "cycle_date",
          "DATE"
        ],
        [
          "--",
          "Pipeline"
        ],
        [
          "pipeline_status",
          "VARCHAR(30)"
        ],
        [
          "--",
          "Financial"
        ],
        [
          "gross_amount_paise",
          "BIGINT"
        ],
        [
          "fees_paise",
          "BIGINT"
        ],
        [
          "tax_paise",
          "BIGINT"
        ],
        [
          "net_amount_paise",
          "BIGINT"
        ],
        [
          "--",
          "Timing"
        ],
        [
          "captured_at",
          "TIMESTAMP"
        ],
        [
          "settlement_initiated_at",
          "TIMESTAMP"
        ],
        [
          "bank_transfer_at",
          "TIMESTAMP"
        ],
        [
          "credited_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Reconciliation"
        ],
        [
          "reconciliation_job_id",
          "VARCHAR(100)"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Indexes"
        ],
        [
          "INDEX",
          "idx_settlements_date"
        ],
        [
          "INDEX",
          "idx_settlements_status"
        ],
        [
          "INDEX",
          "idx_settlements_merchant"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "settlement_id",
          "VARCHAR(100)"
        ],
        [
          "merchant_id",
          "VARCHAR(50)"
        ],
        [
          "settlement_date",
          "DATE"
        ],
        [
          "cycle_date",
          "DATE"
        ],
        [
          "pipeline_status",
          "VARCHAR(30)"
        ],
        [
          "gross_amount_paise",
          "BIGINT"
        ],
        [
          "fees_paise",
          "BIGINT"
        ],
        [
          "tax_paise",
          "BIGINT"
        ],
        [
          "net_amount_paise",
          "BIGINT"
        ],
        [
          "captured_at",
          "TIMESTAMP"
        ],
        [
          "settlement_initiated_at",
          "TIMESTAMP"
        ],
        [
          "bank_transfer_at",
          "TIMESTAMP"
        ],
        [
          "credited_at",
          "TIMESTAMP"
        ],
        [
          "reconciliation_job_id",
          "VARCHAR(100)"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_create_v2_schema.sql"
    },
    "sp_v2_daily_kpis": {
      "columns": [
        [
          "Optimized",
          "for"
        ],
        [
          "--",
          "============================================================================="
        ],
        [
          "--",
          "Daily"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "summary_date",
          "DATE"
        ],
        [
          "--",
          "Transaction"
        ],
        [
          "total_transactions",
          "INTEGER"
        ],
        [
          "total_amount_paise",
          "BIGINT"
        ],
        [
          "matched_transactions",
          "INTEGER"
        ],
        [
          "matched_amount_paise",
          "BIGINT"
        ],
        [
          "unmatched_transactions",
          "INTEGER"
        ],
        [
          "exception_transactions",
          "INTEGER"
        ],
        [
          "--",
          "Match"
        ],
        [
          "match_rate_percentage",
          "DECIMAL(5,2)"
        ],
        [
          "--",
          "Source"
        ],
        [
          "manual_upload_transactions",
          "INTEGER"
        ],
        [
          "connector_transactions",
          "INTEGER"
        ],
        [
          "manual_upload_matched",
          "INTEGER"
        ],
        [
          "connector_matched",
          "INTEGER"
        ],
        [
          "--",
          "Settlement"
        ],
        [
          "captured_count",
          "INTEGER"
        ],
        [
          "in_settlement_count",
          "INTEGER"
        ],
        [
          "sent_to_bank_count",
          "INTEGER"
        ],
        [
          "credited_count",
          "INTEGER"
        ],
        [
          "unsettled_count",
          "INTEGER"
        ],
        [
          "--",
          "Last"
        ],
        [
          "calculated_at",
          "TIMESTAMP"
        ],
        [
          "--",
          "Constraints"
        ],
        [
          "INDEX",
          "idx_daily_kpis_date"
        ],
        [
          "pre-calculated",
          "for"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "summary_date",
          "DATE"
        ],
        [
          "total_transactions",
          "INTEGER"
        ],
        [
          "total_amount_paise",
          "BIGINT"
        ],
        [
          "matched_transactions",
          "INTEGER"
        ],
        [
          "matched_amount_paise",
          "BIGINT"
        ],
        [
          "unmatched_transactions",
          "INTEGER"
        ],
        [
          "exception_transactions",
          "INTEGER"
        ],
        [
          "match_rate_percentage",
          "DECIMAL(5,2)"
        ],
        [
          "manual_upload_transactions",
          "INTEGER"
        ],
        [
          "connector_transactions",
          "INTEGER"
        ],
        [
          "manual_upload_matched",
          "INTEGER"
        ],
        [
          "connector_matched",
          "INTEGER"
        ],
        [
          "captured_count",
          "INTEGER"
        ],
        [
          "in_settlement_count",
          "INTEGER"
        ],
        [
          "sent_to_bank_count",
          "INTEGER"
        ],
        [
          "credited_count",
          "INTEGER"
        ],
        [
          "unsettled_count",
          "INTEGER"
        ],
        [
          "calculated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_create_v2_schema.sql"
    },
    "settlement_txn": {
      "columns": [
        [
          "UTR)",
          ""
        ],
        [
          "--",
          "Each"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "utr",
          "TEXT"
        ],
        [
          "amount_paise",
          "BIGINT"
        ],
        [
          "mode",
          "TEXT"
        ],
        [
          "captured_at",
          "TIMESTAMPTZ"
        ],
        [
          "state",
          "settlement_state"
        ],
        [
          "state_at",
          "TIMESTAMPTZ"
        ],
        [
          "merchant_id",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_settlement_pipeline.sql"
    },
    "settlement_txn_events": {
      "columns": [
        [
          "Optional)",
          ""
        ],
        [
          "--",
          "========================================="
        ],
        [
          "--",
          "Tracks"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "utr",
          "TEXT"
        ],
        [
          "prev_state",
          "settlement_state,"
        ],
        [
          "next_state",
          "settlement_state"
        ],
        [
          "event_at",
          "TIMESTAMPTZ"
        ],
        [
          "reason",
          "TEXT,"
        ],
        [
          "metadata",
          "JSONB"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/001_settlement_pipeline.sql"
    },
    "ingested_files": {
      "columns": [
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "bank",
          "TEXT"
        ],
        [
          "remote_path",
          "TEXT"
        ],
        [
          "filename",
          "TEXT"
        ],
        [
          "business_date",
          "DATE"
        ],
        [
          "sequence",
          "INT"
        ],
        [
          "size_bytes",
          "BIGINT"
        ],
        [
          "checksum_sha256",
          "TEXT"
        ],
        [
          "uploaded_at",
          "TIMESTAMPTZ,"
        ],
        [
          "seen_at",
          "TIMESTAMPTZ"
        ],
        [
          "completed_at",
          "TIMESTAMPTZ,"
        ],
        [
          "downloaded_at",
          "TIMESTAMPTZ"
        ],
        [
          "validated_at",
          "TIMESTAMPTZ"
        ],
        [
          "status",
          "TEXT"
        ],
        [
          "fail_reason",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "bank",
          "TEXT"
        ],
        [
          "remote_path",
          "TEXT"
        ],
        [
          "filename",
          "TEXT"
        ],
        [
          "business_date",
          "DATE"
        ],
        [
          "sequence",
          "INT"
        ],
        [
          "size_bytes",
          "BIGINT"
        ],
        [
          "checksum_sha256",
          "TEXT"
        ],
        [
          "uploaded_at",
          "TIMESTAMPTZ,"
        ],
        [
          "seen_at",
          "TIMESTAMPTZ"
        ],
        [
          "completed_at",
          "TIMESTAMPTZ,"
        ],
        [
          "downloaded_at",
          "TIMESTAMPTZ"
        ],
        [
          "validated_at",
          "TIMESTAMPTZ"
        ],
        [
          "status",
          "TEXT"
        ],
        [
          "fail_reason",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/003_create_ingestion_tables.sql"
    },
    "file_expectations": {
      "columns": [
        [
          "computed",
          "from"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "bank",
          "TEXT"
        ],
        [
          "window_start",
          "TIMESTAMPTZ"
        ],
        [
          "window_end",
          "TIMESTAMPTZ"
        ],
        [
          "business_date",
          "DATE"
        ],
        [
          "expected_name",
          "TEXT"
        ],
        [
          "expected_seq",
          "INT"
        ],
        [
          "required",
          "BOOLEAN"
        ],
        [
          "received",
          "BOOLEAN"
        ],
        [
          "received_at",
          "TIMESTAMPTZ"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ],
        [
          "computed",
          "from"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "bank",
          "TEXT"
        ],
        [
          "window_start",
          "TIMESTAMPTZ"
        ],
        [
          "window_end",
          "TIMESTAMPTZ"
        ],
        [
          "business_date",
          "DATE"
        ],
        [
          "expected_name",
          "TEXT"
        ],
        [
          "expected_seq",
          "INT"
        ],
        [
          "required",
          "BOOLEAN"
        ],
        [
          "received",
          "BOOLEAN"
        ],
        [
          "received_at",
          "TIMESTAMPTZ"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/003_create_ingestion_tables.sql"
    },
    "connector_health": {
      "columns": [
        [
          "bank",
          "TEXT"
        ],
        [
          "last_file_at",
          "TIMESTAMPTZ"
        ],
        [
          "expected_count",
          "INT"
        ],
        [
          "received_count",
          "INT"
        ],
        [
          "lag_minutes",
          "INT"
        ],
        [
          "window_status",
          "TEXT"
        ],
        [
          "message",
          "TEXT"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ],
        [
          "bank",
          "TEXT"
        ],
        [
          "last_file_at",
          "TIMESTAMPTZ"
        ],
        [
          "expected_count",
          "INT"
        ],
        [
          "received_count",
          "INT"
        ],
        [
          "lag_minutes",
          "INT"
        ],
        [
          "window_status",
          "TEXT"
        ],
        [
          "message",
          "TEXT"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/003_create_ingestion_tables.sql"
    },
    "bank_ingest_configs": {
      "columns": [
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "bank",
          "TEXT"
        ],
        [
          "sftp_config",
          "JSONB"
        ],
        [
          "filename_config",
          "JSONB"
        ],
        [
          "timezone",
          "TEXT"
        ],
        [
          "cutoffs",
          "TEXT[]"
        ],
        [
          "grace_minutes",
          "INT"
        ],
        [
          "completion_config",
          "JSONB"
        ],
        [
          "validation_config",
          "JSONB"
        ],
        [
          "pgp_config",
          "JSONB"
        ],
        [
          "active",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "bank",
          "TEXT"
        ],
        [
          "sftp_config",
          "JSONB"
        ],
        [
          "filename_config",
          "JSONB"
        ],
        [
          "timezone",
          "TEXT"
        ],
        [
          "cutoffs",
          "TEXT[]"
        ],
        [
          "grace_minutes",
          "INT"
        ],
        [
          "completion_config",
          "JSONB"
        ],
        [
          "validation_config",
          "JSONB"
        ],
        [
          "pgp_config",
          "JSONB"
        ],
        [
          "active",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/003_create_ingestion_tables.sql"
    },
    "ingest_alerts": {
      "columns": [
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "bank",
          "TEXT"
        ],
        [
          "alert_type",
          "TEXT"
        ],
        [
          "severity",
          "TEXT"
        ],
        [
          "message",
          "TEXT"
        ],
        [
          "details",
          "JSONB"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "id",
          "BIGSERIAL"
        ],
        [
          "bank",
          "TEXT"
        ],
        [
          "alert_type",
          "TEXT"
        ],
        [
          "severity",
          "TEXT"
        ],
        [
          "message",
          "TEXT"
        ],
        [
          "details",
          "JSONB"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/003_create_ingestion_tables.sql"
    },
    "sp_v2_merchants": {
      "columns": [
        [
          "V1",
          "compatible)"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "name",
          "VARCHAR(255)"
        ],
        [
          "gstin",
          "VARCHAR(15)"
        ],
        [
          "pan",
          "VARCHAR(10)"
        ],
        [
          "risk_score",
          "INTEGER"
        ],
        [
          "kyc_status",
          "VARCHAR(20)"
        ],
        [
          "bank_account_number",
          "VARCHAR(50)"
        ],
        [
          "bank_ifsc_code",
          "VARCHAR(11)"
        ],
        [
          "is_active",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/003_create_v1_recon_schema.sql"
    },
    "sp_v2_transactions_v1": {
      "columns": [
        [
          "V1",
          "compatible)"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "merchant_id",
          "UUID"
        ],
        [
          "pgw_ref",
          "TEXT"
        ],
        [
          "utr",
          "VARCHAR(50),"
        ],
        [
          "amount_paise",
          "BIGINT"
        ],
        [
          "currency",
          "CHAR(3)"
        ],
        [
          "payment_mode",
          "VARCHAR(20)"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "customer_email",
          "VARCHAR(255)"
        ],
        [
          "customer_phone",
          "VARCHAR(15)"
        ],
        [
          "metadata",
          "JSONB"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [
        [
          "merchant_id",
          "sp_v2_merchants",
          "id"
        ]
      ],
      "indexes": [],
      "comment": "from db/migrations/003_create_v1_recon_schema.sql"
    },
    "sp_v2_settlement_batches": {
      "columns": [
        [
          "V1",
          "compatible)"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "merchant_id",
          "UUID"
        ],
        [
          "cycle_date",
          "DATE"
        ],
        [
          "rail",
          "VARCHAR(10)"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "cutoff_time",
          "TIMESTAMP"
        ],
        [
          "total_transactions",
          "INTEGER"
        ],
        [
          "gross_amount_paise",
          "BIGINT"
        ],
        [
          "total_commission_paise",
          "BIGINT"
        ],
        [
          "total_gst_paise",
          "BIGINT"
        ],
        [
          "total_tds_paise",
          "BIGINT"
        ],
        [
          "total_reserve_paise",
          "BIGINT"
        ],
        [
          "net_amount_paise",
          "BIGINT"
        ],
        [
          "bank_reference",
          "VARCHAR(100)"
        ],
        [
          "bank_file_id",
          "UUID"
        ],
        [
          "maker_id",
          "UUID"
        ],
        [
          "checker_id",
          "UUID"
        ],
        [
          "approved_at",
          "TIMESTAMP"
        ],
        [
          "sent_to_bank_at",
          "TIMESTAMP"
        ],
        [
          "reconciled_at",
          "TIMESTAMP"
        ],
        [
          "paid_at",
          "TIMESTAMP"
        ],
        [
          "failure_reason",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ],
        [
          "updated_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [
        [
          "merchant_id",
          "sp_v2_merchants",
          "id"
        ]
      ],
      "indexes": [],
      "comment": "from db/migrations/003_create_v1_recon_schema.sql"
    },
    "sp_v2_settlement_items": {
      "columns": [
        [
          "V1",
          "compatible)"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "batch_id",
          "UUID"
        ],
        [
          "txn_id",
          "UUID"
        ],
        [
          "gross_paise",
          "BIGINT"
        ],
        [
          "commission_paise",
          "BIGINT"
        ],
        [
          "gst_on_commission_paise",
          "BIGINT"
        ],
        [
          "tds_paise",
          "BIGINT"
        ],
        [
          "reserve_paise",
          "BIGINT"
        ],
        [
          "net_paise",
          "BIGINT"
        ],
        [
          "commission_tier",
          "VARCHAR(50)"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [
        [
          "batch_id",
          "sp_v2_settlement_batches",
          "id"
        ],
        [
          "txn_id",
          "sp_v2_transactions_v1",
          "id"
        ]
      ],
      "indexes": [],
      "comment": "from db/migrations/003_create_v1_recon_schema.sql"
    },
    "sp_v2_bank_files": {
      "columns": [
        [
          "V1",
          "compatible)"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "acquirer",
          "TEXT"
        ],
        [
          "cycle_date",
          "DATE"
        ],
        [
          "rail",
          "VARCHAR(10)"
        ],
        [
          "status",
          "VARCHAR(20)"
        ],
        [
          "file_name",
          "VARCHAR(255)"
        ],
        [
          "file_hash",
          "TEXT,"
        ],
        [
          "s3_bucket",
          "VARCHAR(100)"
        ],
        [
          "s3_key",
          "VARCHAR(500)"
        ],
        [
          "record_count",
          "INTEGER"
        ],
        [
          "total_amount_paise",
          "BIGINT"
        ],
        [
          "parsed_at",
          "TIMESTAMP"
        ],
        [
          "received_at",
          "TIMESTAMP"
        ],
        [
          "error_message",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/003_create_v1_recon_schema.sql"
    },
    "sp_v2_utr_credits": {
      "columns": [
        [
          "V1",
          "compatible"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "acquirer",
          "TEXT"
        ],
        [
          "utr",
          "TEXT"
        ],
        [
          "amount_paise",
          "BIGINT"
        ],
        [
          "credited_at",
          "TIMESTAMP"
        ],
        [
          "cycle_date",
          "DATE"
        ],
        [
          "bank_reference",
          "VARCHAR(100)"
        ],
        [
          "raw_data",
          "JSONB,"
        ],
        [
          "bank_file_id",
          "UUID"
        ],
        [
          "reconciled",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [
        [
          "bank_file_id",
          "sp_v2_bank_files",
          "id"
        ]
      ],
      "indexes": [],
      "comment": "from db/migrations/003_create_v1_recon_schema.sql"
    },
    "sp_v2_recon_matches": {
      "columns": [
        [
          "V1",
          "compatible"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "utr_id",
          "UUID"
        ],
        [
          "item_id",
          "UUID"
        ],
        [
          "match_type",
          "VARCHAR(10)"
        ],
        [
          "match_score",
          "SMALLINT"
        ],
        [
          "amount_difference_paise",
          "BIGINT"
        ],
        [
          "matched_by",
          "VARCHAR(50)"
        ],
        [
          "notes",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [
        [
          "utr_id",
          "sp_v2_utr_credits",
          "id"
        ],
        [
          "item_id",
          "sp_v2_settlement_items",
          "id"
        ]
      ],
      "indexes": [],
      "comment": "from db/migrations/003_create_v1_recon_schema.sql"
    },
    "sp_v2_rolling_reserve_ledger": {
      "columns": [
        [
          "V1",
          "compatible)"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "merchant_id",
          "UUID"
        ],
        [
          "cycle_date",
          "DATE"
        ],
        [
          "batch_id",
          "UUID"
        ],
        [
          "debit_paise",
          "BIGINT"
        ],
        [
          "credit_paise",
          "BIGINT"
        ],
        [
          "balance_paise",
          "BIGINT"
        ],
        [
          "release_date",
          "DATE,"
        ],
        [
          "released",
          "BOOLEAN"
        ],
        [
          "notes",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [
        [
          "merchant_id",
          "sp_v2_merchants",
          "id"
        ],
        [
          "batch_id",
          "sp_v2_settlement_batches",
          "id"
        ]
      ],
      "indexes": [],
      "comment": "from db/migrations/003_create_v1_recon_schema.sql"
    },
    "sp_v2_commission_tiers": {
      "columns": [
        [
          "V1",
          "compatible)"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "tier_name",
          "VARCHAR(50)"
        ],
        [
          "min_volume_paise",
          "BIGINT"
        ],
        [
          "max_volume_paise",
          "BIGINT"
        ],
        [
          "commission_percentage",
          "DECIMAL(5,3)"
        ],
        [
          "is_active",
          "BOOLEAN"
        ],
        [
          "created_at",
          "TIMESTAMP"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/003_create_v1_recon_schema.sql"
    },
    "chargebacks": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "merchant_id",
          "UUID"
        ],
        [
          "merchant_name",
          "TEXT"
        ],
        [
          "acquirer",
          "TEXT"
        ],
        [
          "network",
          "network_type"
        ],
        [
          "case_ref",
          "TEXT"
        ],
        [
          "txn_id",
          "TEXT"
        ],
        [
          "rrn",
          "TEXT,"
        ],
        [
          "utr",
          "TEXT,"
        ],
        [
          "pg_ref",
          "TEXT,"
        ],
        [
          "reason_code",
          "TEXT"
        ],
        [
          "reason_desc",
          "TEXT"
        ],
        [
          "category",
          "chargeback_category"
        ],
        [
          "disputed_amount_paise",
          "BIGINT"
        ],
        [
          "currency",
          "TEXT"
        ],
        [
          "status",
          "chargeback_status"
        ],
        [
          "opened_at",
          "TIMESTAMPTZ"
        ],
        [
          "evidence_due_at",
          "TIMESTAMPTZ"
        ],
        [
          "decision_at",
          "TIMESTAMPTZ"
        ],
        [
          "owner_user_id",
          "UUID"
        ],
        [
          "owner_email",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/V011__chargebacks.sql"
    },
    "chargeback_events": {
      "columns": [
        [
          "timeline)",
          ""
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "chargeback_id",
          "UUID"
        ],
        [
          "ts",
          "TIMESTAMPTZ"
        ],
        [
          "actor_email",
          "TEXT"
        ],
        [
          "action",
          "TEXT"
        ],
        [
          "payload",
          "JSONB"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/V011__chargebacks.sql"
    },
    "chargeback_evidence_files": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "chargeback_id",
          "UUID"
        ],
        [
          "file_name",
          "TEXT"
        ],
        [
          "mime_type",
          "TEXT"
        ],
        [
          "size_bytes",
          "BIGINT"
        ],
        [
          "storage_url",
          "TEXT"
        ],
        [
          "uploaded_by",
          "TEXT"
        ],
        [
          "uploaded_at",
          "TIMESTAMPTZ"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/V011__chargebacks.sql"
    },
    "chargeback_allocations": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "chargeback_id",
          "UUID"
        ],
        [
          "journal_entry_id",
          "UUID"
        ],
        [
          "type",
          "chargeback_allocation_type"
        ],
        [
          "amount_paise",
          "BIGINT"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/V011__chargebacks.sql"
    },
    "chargeback_transactions": {
      "columns": [
        [
          "denormalized",
          "for"
        ],
        [
          "CREATE",
          "TABLE"
        ],
        [
          "id",
          "UUID"
        ],
        [
          "chargeback_id",
          "UUID"
        ],
        [
          "txn_id",
          "TEXT"
        ],
        [
          "original_amount_paise",
          "BIGINT"
        ],
        [
          "fee_paise",
          "BIGINT"
        ],
        [
          "tax_paise",
          "BIGINT"
        ],
        [
          "net_amount_paise",
          "BIGINT"
        ],
        [
          "payment_method",
          "TEXT"
        ],
        [
          "payment_date",
          "TIMESTAMPTZ"
        ],
        [
          "settlement_date",
          "TIMESTAMPTZ"
        ],
        [
          "customer_email",
          "TEXT"
        ],
        [
          "customer_phone",
          "TEXT"
        ],
        [
          "order_id",
          "TEXT"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/V011__chargebacks.sql"
    },
    "chargeback_notifications": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "type",
          "TEXT"
        ],
        [
          "chargeback_id",
          "UUID"
        ],
        [
          "merchant_id",
          "UUID"
        ],
        [
          "merchant_email",
          "TEXT"
        ],
        [
          "case_ref",
          "TEXT"
        ],
        [
          "message",
          "TEXT"
        ],
        [
          "metadata",
          "JSONB"
        ],
        [
          "scheduled_at",
          "TIMESTAMPTZ"
        ],
        [
          "sent_at",
          "TIMESTAMPTZ"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/V011__chargebacks.sql"
    },
    "chargeback_connector_configs": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "name",
          "TEXT"
        ],
        [
          "type",
          "TEXT"
        ],
        [
          "acquirer",
          "TEXT"
        ],
        [
          "enabled",
          "BOOLEAN"
        ],
        [
          "schedule",
          "TEXT,"
        ],
        [
          "sftp_config",
          "JSONB,"
        ],
        [
          "api_config",
          "JSONB,"
        ],
        [
          "mapping_template_id",
          "UUID"
        ],
        [
          "last_run_at",
          "TIMESTAMPTZ"
        ],
        [
          "last_success_at",
          "TIMESTAMPTZ"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/V011__chargebacks.sql"
    },
    "chargeback_mapping_templates": {
      "columns": [
        [
          "id",
          "UUID"
        ],
        [
          "name",
          "TEXT"
        ],
        [
          "acquirer",
          "TEXT"
        ],
        [
          "field_map",
          "JSONB"
        ],
        [
          "date_formats",
          "JSONB,"
        ],
        [
          "amount_parser",
          "JSONB,"
        ],
        [
          "created_at",
          "TIMESTAMPTZ"
        ],
        [
          "updated_at",
          "TIMESTAMPTZ"
        ]
      ],
      "pk": [],
      "fks": [],
      "indexes": [],
      "comment": "from db/migrations/V011__chargebacks.sql"
    }
  },
  "views": {
    "v_pipeline_overview": {
      "sql": "-- SettlePaisa 2.0 Reconciliation Database Schema\n-- Designed for payment transaction reconciliation and settlement tracking\n\n-- Enable UUID extension for PostgreSQL\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\"; -- For text search optimization\n\n-- =============================================\n-- CORE TABLES\n-- =============================================\n\n-- Merchants table\nCREATE TABLE merchants (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    merchant_code VARCHAR(50) UNIQUE NOT NULL,\n    merchant_name VARCHAR(255) NOT NULL,\n    status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'SUSPENDED', 'CLOSED')),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Banks and financial institutions\nCREATE TABLE banks (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    bank_code VARCHAR(10) UNIQUE NOT NULL, -- HDFC, ICICI, AXIS, SBI, etc.\n    bank_name VARCHAR(100) NOT NULL,\n    swift_code VARCHAR(11),\n    country_code CHAR(2) DEFAULT 'IN',\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Bank connectors (SFTP/API connections)\nCREATE TABLE bank_connectors (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    bank_id UUID NOT NULL REFERENCES banks(id),\n    connector_name VARCHAR(100) NOT NULL, -- \"HDFC Bank SFTP\", \"ICICI API\"\n    connector_type VARCHAR(10) NOT NULL CHECK (connector_type IN ('SFTP', 'API', 'EMAIL')),\n    connection_config JSONB, -- Stores SFTP details, API endpoints, credentials ref\n    status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'DISABLED', 'MAINTENANCE')),\n    last_sync_at TIMESTAMP WITH TIME ZONE,\n    sync_frequency_minutes INTEGER DEFAULT 30, -- How often to sync\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =============================================\n-- TRANSACTION PIPELINE TABLES\n-- =============================================\n\n-- Main transactions table - captures all payment transactions\nCREATE TABLE transactions (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- Transaction identifiers\n    transaction_id VARCHAR(100) UNIQUE NOT NULL, -- PG transaction ID\n    utr VARCHAR(50), -- Unique Transaction Reference from bank\n    rrn VARCHAR(50), -- Retrieval Reference Number\n    \n    -- Transaction details\n    merchant_id UUID NOT NULL REFERENCES merchants(id),\n    amount_paise BIGINT NOT NULL, -- Amount in paise (\u20b91 = 100 paise)\n    currency CHAR(3) DEFAULT 'INR',\n    \n    -- Dates and timing\n    transaction_date DATE NOT NULL,\n    transaction_time TIMESTAMP WITH TIME ZONE NOT NULL,\n    captured_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Settlement pipeline status\n    pipeline_status VARCHAR(20) DEFAULT 'CAPTURED' CHECK (\n        pipeline_status IN ('CAPTURED', 'IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED', 'FAILED', 'CANCELLED')\n    ),\n    settlement_date DATE,\n    credited_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Bank information\n    bank_id UUID REFERENCES banks(id),\n    bank_account_number VARCHAR(50),\n    ifsc_code VARCHAR(11),\n    \n    -- Data source tracking\n    data_source VARCHAR(20) DEFAULT 'MANUAL' CHECK (data_source IN ('MANUAL', 'CONNECTOR')),\n    source_connector_id UUID REFERENCES bank_connectors(id),\n    \n    -- Metadata\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Indexes\n    CONSTRAINT valid_amount CHECK (amount_paise > 0),\n    CONSTRAINT valid_dates CHECK (credited_at IS NULL OR credited_at >= captured_at)\n);\n\n-- Bank statements/files received from connectors\nCREATE TABLE bank_statements (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- File information\n    bank_id UUID NOT NULL REFERENCES banks(id),\n    connector_id UUID REFERENCES bank_connectors(id),\n    statement_date DATE NOT NULL,\n    file_name VARCHAR(255),\n    file_hash VARCHAR(64), -- SHA-256 for duplicate detection\n    \n    -- Processing status\n    status VARCHAR(20) DEFAULT 'RECEIVED' CHECK (\n        status IN ('RECEIVED', 'PROCESSING', 'PROCESSED', 'FAILED', 'DUPLICATE')\n    ),\n    total_records INTEGER,\n    processed_records INTEGER DEFAULT 0,\n    \n    -- Timing\n    received_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    processed_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Raw file content (optional)\n    raw_content TEXT,\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Individual bank statement entries\nCREATE TABLE bank_statement_entries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- Link to statement file\n    statement_id UUID NOT NULL REFERENCES bank_statements(id),\n    line_number INTEGER NOT NULL,\n    \n    -- Bank entry details\n    utr VARCHAR(50),\n    amount_paise BIGINT NOT NULL,\n    transaction_date DATE NOT NULL,\n    description TEXT,\n    debit_credit CHAR(1) CHECK (debit_credit IN ('D', 'C')),\n    balance_paise BIGINT,\n    \n    -- Reconciliation status\n    is_matched BOOLEAN DEFAULT false,\n    matched_transaction_id UUID REFERENCES transactions(id),\n    match_confidence DECIMAL(5,2), -- 0.00 to 100.00\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    CONSTRAINT unique_statement_line UNIQUE (statement_id, line_number)\n);\n\n-- =============================================\n-- RECONCILIATION TABLES\n-- =============================================\n\n-- Reconciliation matches between transactions and bank entries\nCREATE TABLE reconciliation_matches (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- What's being matched\n    transaction_id UUID NOT NULL REFERENCES transactions(id),\n    bank_entry_id UUID NOT NULL REFERENCES bank_statement_entries(id),\n    \n    -- Match quality\n    match_type VARCHAR(20) NOT NULL CHECK (\n        match_type IN ('EXACT_UTR', 'AMOUNT_DATE', 'FUZZY', 'MANUAL')\n    ),\n    match_confidence DECIMAL(5,2) NOT NULL, -- 0.00 to 100.00\n    match_score JSONB, -- Detailed scoring breakdown\n    \n    -- Status\n    status VARCHAR(20) DEFAULT 'PENDING' CHECK (\n        status IN ('PENDING', 'CONFIRMED', 'DISPUTED', 'REJECTED')\n    ),\n    \n    -- Audit trail\n    matched_by VARCHAR(20) DEFAULT 'SYSTEM' CHECK (matched_by IN ('SYSTEM', 'MANUAL')),\n    matched_by_user_id UUID, -- When manually matched\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    confirmed_at TIMESTAMP WITH TIME ZONE,\n    \n    CONSTRAINT unique_transaction_match UNIQUE (transaction_id, bank_entry_id)\n);\n\n-- =============================================\n-- EXCEPTION MANAGEMENT\n-- =============================================\n\n-- Exception reasons lookup\nCREATE TABLE exception_reasons (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    reason_code VARCHAR(50) UNIQUE NOT NULL, -- UTR_MISSING, AMT_MISMATCH, etc.\n    reason_label VARCHAR(100) NOT NULL,\n    severity VARCHAR(10) DEFAULT 'MEDIUM' CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),\n    description TEXT,\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Reconciliation exceptions\nCREATE TABLE reconciliation_exceptions (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- What has the exception\n    transaction_id UUID REFERENCES transactions(id),\n    bank_entry_id UUID REFERENCES bank_statement_entries(id),\n    \n    -- Exception details\n    reason_id UUID NOT NULL REFERENCES exception_reasons(id),\n    severity VARCHAR(10) NOT NULL CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),\n    \n    -- Status and resolution\n    status VARCHAR(20) DEFAULT 'OPEN' CHECK (\n        status IN ('OPEN', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', 'ESCALATED')\n    ),\n    \n    -- Assignment\n    assigned_to UUID, -- User ID from authentication system\n    assigned_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Resolution\n    resolution_notes TEXT,\n    resolved_by UUID, -- User ID\n    resolved_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Additional context\n    exception_data JSONB, -- Flexible field for exception-specific data\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    CONSTRAINT transaction_or_bank_entry CHECK (\n        transaction_id IS NOT NULL OR bank_entry_id IS NOT NULL\n    )\n);\n\n-- =============================================\n-- OPERATIONAL TABLES\n-- =============================================\n\n-- Connector sync logs\nCREATE TABLE connector_sync_logs (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    connector_id UUID NOT NULL REFERENCES bank_connectors(id),\n    sync_started_at TIMESTAMP WITH TIME ZONE NOT NULL,\n    sync_completed_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Results\n    status VARCHAR(20) NOT NULL CHECK (\n        status IN ('RUNNING', 'SUCCESS', 'FAILED', 'TIMEOUT', 'CANCELLED')\n    ),\n    files_found INTEGER DEFAULT 0,\n    files_processed INTEGER DEFAULT 0,\n    records_processed INTEGER DEFAULT 0,\n    \n    -- Error information\n    error_message TEXT,\n    error_details JSONB,\n    \n    -- Performance metrics\n    duration_seconds INTEGER,\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- System configuration and settings\nCREATE TABLE system_settings (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    setting_key VARCHAR(100) UNIQUE NOT NULL,\n    setting_value TEXT NOT NULL,\n    setting_type VARCHAR(20) DEFAULT 'STRING' CHECK (\n        setting_type IN ('STRING', 'INTEGER', 'BOOLEAN', 'JSON')\n    ),\n    description TEXT,\n    is_sensitive BOOLEAN DEFAULT false, -- For passwords, API keys, etc.\n    updated_by UUID, -- User ID\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =============================================\n-- INDEXES FOR PERFORMANCE\n-- =============================================\n\n-- Transaction indexes\nCREATE INDEX idx_transactions_merchant_date ON transactions(merchant_id, transaction_date);\nCREATE INDEX idx_transactions_utr ON transactions(utr) WHERE utr IS NOT NULL;\nCREATE INDEX idx_transactions_pipeline_status ON transactions(pipeline_status);\nCREATE INDEX idx_transactions_amount_date ON transactions(amount_paise, transaction_date);\nCREATE INDEX idx_transactions_bank ON transactions(bank_id) WHERE bank_id IS NOT NULL;\nCREATE INDEX idx_transactions_source ON transactions(data_source, source_connector_id);\n\n-- Bank statement indexes\nCREATE INDEX idx_bank_statements_date_bank ON bank_statements(statement_date, bank_id);\nCREATE INDEX idx_bank_statements_status ON bank_statements(status);\nCREATE INDEX idx_bank_statements_hash ON bank_statements(file_hash);\n\n-- Bank entry indexes\nCREATE INDEX idx_bank_entries_utr ON bank_statement_entries(utr) WHERE utr IS NOT NULL;\nCREATE INDEX idx_bank_entries_amount_date ON bank_statement_entries(amount_paise, transaction_date);\nCREATE INDEX idx_bank_entries_matched ON bank_statement_entries(is_matched, matched_transaction_id);\n\n-- Reconciliation indexes\nCREATE INDEX idx_recon_matches_status ON reconciliation_matches(status);\nCREATE INDEX idx_recon_matches_confidence ON reconciliation_matches(match_confidence);\nCREATE INDEX idx_recon_matches_type ON reconciliation_matches(match_type);\n\n-- Exception indexes\nCREATE INDEX idx_exceptions_status ON reconciliation_exceptions(status);\nCREATE INDEX idx_exceptions_severity ON reconciliation_exceptions(severity);\nCREATE INDEX idx_exceptions_assigned ON reconciliation_exceptions(assigned_to) WHERE assigned_to IS NOT NULL;\nCREATE INDEX idx_exceptions_created ON reconciliation_exceptions(created_at);\n\n-- Connector indexes\nCREATE INDEX idx_connector_logs_connector_time ON connector_sync_logs(connector_id, sync_started_at);\nCREATE INDEX idx_connector_logs_status ON connector_sync_logs(status);\n\n-- Text search indexes\nCREATE INDEX idx_transactions_search ON transactions USING gin(to_tsvector('english', transaction_id || ' ' || COALESCE(utr, '')));\nCREATE INDEX idx_bank_entries_search ON bank_statement_entries USING gin(to_tsvector('english', COALESCE(utr, '') || ' ' || COALESCE(description, '')));\n\n-- =============================================\n-- TRIGGERS FOR AUDIT TRAIL\n-- =============================================\n\n-- Function to update updated_at timestamp\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Apply updated_at triggers\nCREATE TRIGGER update_transactions_updated_at BEFORE UPDATE ON transactions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_merchants_updated_at BEFORE UPDATE ON merchants FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_bank_connectors_updated_at BEFORE UPDATE ON bank_connectors FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_exceptions_updated_at BEFORE UPDATE ON reconciliation_exceptions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- =============================================\n-- VIEWS FOR DASHBOARD QUERIES\n-- =============================================\n\n-- View for pipeline overview\nCREATE VIEW v_pipeline_overview AS\nSELECT \n    COUNT(*) as total_captured,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED')) as in_settlement,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('SENT_TO_BANK', 'CREDITED')) as sent_to_bank,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CREDITED') as credited,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CAPTURED') as unsettled,\n    SUM(amount_paise) as total_value_paise,\n    SUM(amount_paise) FILTER (WHERE pipeline_status = 'CREDITED') as credited_value_paise\nFROM transactions \nWHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days';\n\n-- View for source breakdown\nCREATE VIEW v_source_breakdown AS\nSELECT \n    CASE \n        WHEN data_source = 'MANUAL' THEN 'MANUAL'\n        ELSE 'CONNECTORS'\n    END as source,\n    COUNT(*) as captured,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED')) as in_settlement,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('SENT_TO_BANK', 'CREDITED')) as sent_to_bank,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CREDITED') as credited,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CAPTURED') as unsettled,\n    ROUND(\n        (COUNT(*) FILTER (WHERE pipeline_status != 'CAPTURED')::DECIMAL / COUNT(*) * 100), 1\n    ) as match_rate_pct\nFROM transactions \nWHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY source;\n\n-- View for top exception reasons\nCREATE VIEW v_top_exception_reasons AS\nSELECT \n    er.reason_code,\n    er.reason_label,\n    COUNT(*) as impacted_txns,\n    ROUND(\n        COUNT(*)::DECIMAL / (SELECT COUNT(*) FROM reconciliation_exceptions WHERE status = 'OPEN') * 100, 0\n    ) as percentage\nFROM reconciliation_exceptions re\nJOIN exception_reasons er ON re.reason_id = er.id\nWHERE re.status = 'OPEN'\nGROUP BY er.reason_code, er.reason_label\nORDER BY impacted_txns DESC\nLIMIT 10;\n\n-- View for connector health\nCREATE VIEW v_connector_health AS\nSELECT \n    bc.connector_name,\n    bc.status,\n    bc.last_sync_at,\n    COALESCE(recent_logs.files_queued, 0) as queued_files,\n    COALESCE(recent_logs.recent_failures, 0) as failures\nFROM bank_connectors bc\nLEFT JOIN (\n    SELECT \n        connector_id,\n        COUNT(*) FILTER (WHERE status = 'FAILED') as recent_failures,\n        COUNT(*) FILTER (WHERE status IN ('RUNNING', 'FAILED')) as files_queued\n    FROM connector_sync_logs \n    WHERE sync_started_at >= NOW() - INTERVAL '24 hours'\n    GROUP BY connector_id\n) recent_logs ON bc.id = recent_logs.connector_id\nWHERE bc.status = 'ACTIVE'\nORDER BY bc.last_sync_at DESC NULLS LAST;\n\n-- =============================================\n-- SAMPLE DATA SEEDS\n-- =============================================\n\n-- Insert default banks\nINSERT INTO banks (bank_code, bank_name, swift_code) VALUES\n('HDFC', 'HDFC Bank Limited', 'HDFCINBB'),\n('ICICI', 'ICICI Bank Limited', 'ICICINBB'),\n('AXIS', 'Axis Bank Limited', 'AXISINBB'),\n('SBI', 'State Bank of India', 'SBININBB'),\n('INDB', 'IndusInd Bank Limited', 'INDBINBB');\n\n-- Insert sample merchant\nINSERT INTO merchants (merchant_code, merchant_name) VALUES\n('DEMO001', 'Demo Merchant Ltd');\n\n-- Insert exception reasons\nINSERT INTO exception_reasons (reason_code, reason_label, severity, description) VALUES\n('UTR_MISSING', 'Missing UTR', 'HIGH', 'Bank UTR not found in transaction'),\n('AMT_MISMATCH', 'Amount Mismatch', 'MEDIUM', 'Transaction amount does not match bank entry'),\n('DUP_UTR', 'Duplicate UTR', 'MEDIUM', 'Same UTR found in multiple transactions'),\n('BANK_MISSING', 'Not in Bank File', 'HIGH', 'Transaction not found in bank statement'),\n('STATUS_PENDING', 'Status Pending', 'LOW', 'Transaction status requires manual review');\n\n-- System settings\nINSERT INTO system_settings (setting_key, setting_value, setting_type, description) VALUES\n('recon_match_threshold', '85.0', 'INTEGER', 'Minimum confidence score for automatic matching'),\n('max_sync_frequency_minutes', '15', 'INTEGER', 'Minimum time between connector syncs'),\n('auto_match_enabled', 'true', 'BOOLEAN', 'Enable automatic transaction matching'),\n('dashboard_refresh_interval', '30', 'INTEGER', 'Dashboard auto-refresh interval in seconds');\n\nCOMMENT ON DATABASE postgres IS 'SettlePaisa 2.0 Reconciliation System Database';",
      "deps": [],
      "materialized": false
    },
    "v_source_breakdown": {
      "sql": "-- SettlePaisa 2.0 Reconciliation Database Schema\n-- Designed for payment transaction reconciliation and settlement tracking\n\n-- Enable UUID extension for PostgreSQL\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\"; -- For text search optimization\n\n-- =============================================\n-- CORE TABLES\n-- =============================================\n\n-- Merchants table\nCREATE TABLE merchants (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    merchant_code VARCHAR(50) UNIQUE NOT NULL,\n    merchant_name VARCHAR(255) NOT NULL,\n    status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'SUSPENDED', 'CLOSED')),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Banks and financial institutions\nCREATE TABLE banks (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    bank_code VARCHAR(10) UNIQUE NOT NULL, -- HDFC, ICICI, AXIS, SBI, etc.\n    bank_name VARCHAR(100) NOT NULL,\n    swift_code VARCHAR(11),\n    country_code CHAR(2) DEFAULT 'IN',\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Bank connectors (SFTP/API connections)\nCREATE TABLE bank_connectors (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    bank_id UUID NOT NULL REFERENCES banks(id),\n    connector_name VARCHAR(100) NOT NULL, -- \"HDFC Bank SFTP\", \"ICICI API\"\n    connector_type VARCHAR(10) NOT NULL CHECK (connector_type IN ('SFTP', 'API', 'EMAIL')),\n    connection_config JSONB, -- Stores SFTP details, API endpoints, credentials ref\n    status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'DISABLED', 'MAINTENANCE')),\n    last_sync_at TIMESTAMP WITH TIME ZONE,\n    sync_frequency_minutes INTEGER DEFAULT 30, -- How often to sync\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =============================================\n-- TRANSACTION PIPELINE TABLES\n-- =============================================\n\n-- Main transactions table - captures all payment transactions\nCREATE TABLE transactions (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- Transaction identifiers\n    transaction_id VARCHAR(100) UNIQUE NOT NULL, -- PG transaction ID\n    utr VARCHAR(50), -- Unique Transaction Reference from bank\n    rrn VARCHAR(50), -- Retrieval Reference Number\n    \n    -- Transaction details\n    merchant_id UUID NOT NULL REFERENCES merchants(id),\n    amount_paise BIGINT NOT NULL, -- Amount in paise (\u20b91 = 100 paise)\n    currency CHAR(3) DEFAULT 'INR',\n    \n    -- Dates and timing\n    transaction_date DATE NOT NULL,\n    transaction_time TIMESTAMP WITH TIME ZONE NOT NULL,\n    captured_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Settlement pipeline status\n    pipeline_status VARCHAR(20) DEFAULT 'CAPTURED' CHECK (\n        pipeline_status IN ('CAPTURED', 'IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED', 'FAILED', 'CANCELLED')\n    ),\n    settlement_date DATE,\n    credited_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Bank information\n    bank_id UUID REFERENCES banks(id),\n    bank_account_number VARCHAR(50),\n    ifsc_code VARCHAR(11),\n    \n    -- Data source tracking\n    data_source VARCHAR(20) DEFAULT 'MANUAL' CHECK (data_source IN ('MANUAL', 'CONNECTOR')),\n    source_connector_id UUID REFERENCES bank_connectors(id),\n    \n    -- Metadata\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Indexes\n    CONSTRAINT valid_amount CHECK (amount_paise > 0),\n    CONSTRAINT valid_dates CHECK (credited_at IS NULL OR credited_at >= captured_at)\n);\n\n-- Bank statements/files received from connectors\nCREATE TABLE bank_statements (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- File information\n    bank_id UUID NOT NULL REFERENCES banks(id),\n    connector_id UUID REFERENCES bank_connectors(id),\n    statement_date DATE NOT NULL,\n    file_name VARCHAR(255),\n    file_hash VARCHAR(64), -- SHA-256 for duplicate detection\n    \n    -- Processing status\n    status VARCHAR(20) DEFAULT 'RECEIVED' CHECK (\n        status IN ('RECEIVED', 'PROCESSING', 'PROCESSED', 'FAILED', 'DUPLICATE')\n    ),\n    total_records INTEGER,\n    processed_records INTEGER DEFAULT 0,\n    \n    -- Timing\n    received_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    processed_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Raw file content (optional)\n    raw_content TEXT,\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Individual bank statement entries\nCREATE TABLE bank_statement_entries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- Link to statement file\n    statement_id UUID NOT NULL REFERENCES bank_statements(id),\n    line_number INTEGER NOT NULL,\n    \n    -- Bank entry details\n    utr VARCHAR(50),\n    amount_paise BIGINT NOT NULL,\n    transaction_date DATE NOT NULL,\n    description TEXT,\n    debit_credit CHAR(1) CHECK (debit_credit IN ('D', 'C')),\n    balance_paise BIGINT,\n    \n    -- Reconciliation status\n    is_matched BOOLEAN DEFAULT false,\n    matched_transaction_id UUID REFERENCES transactions(id),\n    match_confidence DECIMAL(5,2), -- 0.00 to 100.00\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    CONSTRAINT unique_statement_line UNIQUE (statement_id, line_number)\n);\n\n-- =============================================\n-- RECONCILIATION TABLES\n-- =============================================\n\n-- Reconciliation matches between transactions and bank entries\nCREATE TABLE reconciliation_matches (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- What's being matched\n    transaction_id UUID NOT NULL REFERENCES transactions(id),\n    bank_entry_id UUID NOT NULL REFERENCES bank_statement_entries(id),\n    \n    -- Match quality\n    match_type VARCHAR(20) NOT NULL CHECK (\n        match_type IN ('EXACT_UTR', 'AMOUNT_DATE', 'FUZZY', 'MANUAL')\n    ),\n    match_confidence DECIMAL(5,2) NOT NULL, -- 0.00 to 100.00\n    match_score JSONB, -- Detailed scoring breakdown\n    \n    -- Status\n    status VARCHAR(20) DEFAULT 'PENDING' CHECK (\n        status IN ('PENDING', 'CONFIRMED', 'DISPUTED', 'REJECTED')\n    ),\n    \n    -- Audit trail\n    matched_by VARCHAR(20) DEFAULT 'SYSTEM' CHECK (matched_by IN ('SYSTEM', 'MANUAL')),\n    matched_by_user_id UUID, -- When manually matched\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    confirmed_at TIMESTAMP WITH TIME ZONE,\n    \n    CONSTRAINT unique_transaction_match UNIQUE (transaction_id, bank_entry_id)\n);\n\n-- =============================================\n-- EXCEPTION MANAGEMENT\n-- =============================================\n\n-- Exception reasons lookup\nCREATE TABLE exception_reasons (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    reason_code VARCHAR(50) UNIQUE NOT NULL, -- UTR_MISSING, AMT_MISMATCH, etc.\n    reason_label VARCHAR(100) NOT NULL,\n    severity VARCHAR(10) DEFAULT 'MEDIUM' CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),\n    description TEXT,\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Reconciliation exceptions\nCREATE TABLE reconciliation_exceptions (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- What has the exception\n    transaction_id UUID REFERENCES transactions(id),\n    bank_entry_id UUID REFERENCES bank_statement_entries(id),\n    \n    -- Exception details\n    reason_id UUID NOT NULL REFERENCES exception_reasons(id),\n    severity VARCHAR(10) NOT NULL CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),\n    \n    -- Status and resolution\n    status VARCHAR(20) DEFAULT 'OPEN' CHECK (\n        status IN ('OPEN', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', 'ESCALATED')\n    ),\n    \n    -- Assignment\n    assigned_to UUID, -- User ID from authentication system\n    assigned_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Resolution\n    resolution_notes TEXT,\n    resolved_by UUID, -- User ID\n    resolved_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Additional context\n    exception_data JSONB, -- Flexible field for exception-specific data\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    CONSTRAINT transaction_or_bank_entry CHECK (\n        transaction_id IS NOT NULL OR bank_entry_id IS NOT NULL\n    )\n);\n\n-- =============================================\n-- OPERATIONAL TABLES\n-- =============================================\n\n-- Connector sync logs\nCREATE TABLE connector_sync_logs (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    connector_id UUID NOT NULL REFERENCES bank_connectors(id),\n    sync_started_at TIMESTAMP WITH TIME ZONE NOT NULL,\n    sync_completed_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Results\n    status VARCHAR(20) NOT NULL CHECK (\n        status IN ('RUNNING', 'SUCCESS', 'FAILED', 'TIMEOUT', 'CANCELLED')\n    ),\n    files_found INTEGER DEFAULT 0,\n    files_processed INTEGER DEFAULT 0,\n    records_processed INTEGER DEFAULT 0,\n    \n    -- Error information\n    error_message TEXT,\n    error_details JSONB,\n    \n    -- Performance metrics\n    duration_seconds INTEGER,\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- System configuration and settings\nCREATE TABLE system_settings (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    setting_key VARCHAR(100) UNIQUE NOT NULL,\n    setting_value TEXT NOT NULL,\n    setting_type VARCHAR(20) DEFAULT 'STRING' CHECK (\n        setting_type IN ('STRING', 'INTEGER', 'BOOLEAN', 'JSON')\n    ),\n    description TEXT,\n    is_sensitive BOOLEAN DEFAULT false, -- For passwords, API keys, etc.\n    updated_by UUID, -- User ID\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =============================================\n-- INDEXES FOR PERFORMANCE\n-- =============================================\n\n-- Transaction indexes\nCREATE INDEX idx_transactions_merchant_date ON transactions(merchant_id, transaction_date);\nCREATE INDEX idx_transactions_utr ON transactions(utr) WHERE utr IS NOT NULL;\nCREATE INDEX idx_transactions_pipeline_status ON transactions(pipeline_status);\nCREATE INDEX idx_transactions_amount_date ON transactions(amount_paise, transaction_date);\nCREATE INDEX idx_transactions_bank ON transactions(bank_id) WHERE bank_id IS NOT NULL;\nCREATE INDEX idx_transactions_source ON transactions(data_source, source_connector_id);\n\n-- Bank statement indexes\nCREATE INDEX idx_bank_statements_date_bank ON bank_statements(statement_date, bank_id);\nCREATE INDEX idx_bank_statements_status ON bank_statements(status);\nCREATE INDEX idx_bank_statements_hash ON bank_statements(file_hash);\n\n-- Bank entry indexes\nCREATE INDEX idx_bank_entries_utr ON bank_statement_entries(utr) WHERE utr IS NOT NULL;\nCREATE INDEX idx_bank_entries_amount_date ON bank_statement_entries(amount_paise, transaction_date);\nCREATE INDEX idx_bank_entries_matched ON bank_statement_entries(is_matched, matched_transaction_id);\n\n-- Reconciliation indexes\nCREATE INDEX idx_recon_matches_status ON reconciliation_matches(status);\nCREATE INDEX idx_recon_matches_confidence ON reconciliation_matches(match_confidence);\nCREATE INDEX idx_recon_matches_type ON reconciliation_matches(match_type);\n\n-- Exception indexes\nCREATE INDEX idx_exceptions_status ON reconciliation_exceptions(status);\nCREATE INDEX idx_exceptions_severity ON reconciliation_exceptions(severity);\nCREATE INDEX idx_exceptions_assigned ON reconciliation_exceptions(assigned_to) WHERE assigned_to IS NOT NULL;\nCREATE INDEX idx_exceptions_created ON reconciliation_exceptions(created_at);\n\n-- Connector indexes\nCREATE INDEX idx_connector_logs_connector_time ON connector_sync_logs(connector_id, sync_started_at);\nCREATE INDEX idx_connector_logs_status ON connector_sync_logs(status);\n\n-- Text search indexes\nCREATE INDEX idx_transactions_search ON transactions USING gin(to_tsvector('english', transaction_id || ' ' || COALESCE(utr, '')));\nCREATE INDEX idx_bank_entries_search ON bank_statement_entries USING gin(to_tsvector('english', COALESCE(utr, '') || ' ' || COALESCE(description, '')));\n\n-- =============================================\n-- TRIGGERS FOR AUDIT TRAIL\n-- =============================================\n\n-- Function to update updated_at timestamp\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Apply updated_at triggers\nCREATE TRIGGER update_transactions_updated_at BEFORE UPDATE ON transactions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_merchants_updated_at BEFORE UPDATE ON merchants FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_bank_connectors_updated_at BEFORE UPDATE ON bank_connectors FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_exceptions_updated_at BEFORE UPDATE ON reconciliation_exceptions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- =============================================\n-- VIEWS FOR DASHBOARD QUERIES\n-- =============================================\n\n-- View for pipeline overview\nCREATE VIEW v_pipeline_overview AS\nSELECT \n    COUNT(*) as total_captured,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED')) as in_settlement,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('SENT_TO_BANK', 'CREDITED')) as sent_to_bank,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CREDITED') as credited,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CAPTURED') as unsettled,\n    SUM(amount_paise) as total_value_paise,\n    SUM(amount_paise) FILTER (WHERE pipeline_status = 'CREDITED') as credited_value_paise\nFROM transactions \nWHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days';\n\n-- View for source breakdown\nCREATE VIEW v_source_breakdown AS\nSELECT \n    CASE \n        WHEN data_source = 'MANUAL' THEN 'MANUAL'\n        ELSE 'CONNECTORS'\n    END as source,\n    COUNT(*) as captured,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED')) as in_settlement,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('SENT_TO_BANK', 'CREDITED')) as sent_to_bank,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CREDITED') as credited,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CAPTURED') as unsettled,\n    ROUND(\n        (COUNT(*) FILTER (WHERE pipeline_status != 'CAPTURED')::DECIMAL / COUNT(*) * 100), 1\n    ) as match_rate_pct\nFROM transactions \nWHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY source;\n\n-- View for top exception reasons\nCREATE VIEW v_top_exception_reasons AS\nSELECT \n    er.reason_code,\n    er.reason_label,\n    COUNT(*) as impacted_txns,\n    ROUND(\n        COUNT(*)::DECIMAL / (SELECT COUNT(*) FROM reconciliation_exceptions WHERE status = 'OPEN') * 100, 0\n    ) as percentage\nFROM reconciliation_exceptions re\nJOIN exception_reasons er ON re.reason_id = er.id\nWHERE re.status = 'OPEN'\nGROUP BY er.reason_code, er.reason_label\nORDER BY impacted_txns DESC\nLIMIT 10;\n\n-- View for connector health\nCREATE VIEW v_connector_health AS\nSELECT \n    bc.connector_name,\n    bc.status,\n    bc.last_sync_at,\n    COALESCE(recent_logs.files_queued, 0) as queued_files,\n    COALESCE(recent_logs.recent_failures, 0) as failures\nFROM bank_connectors bc\nLEFT JOIN (\n    SELECT \n        connector_id,\n        COUNT(*) FILTER (WHERE status = 'FAILED') as recent_failures,\n        COUNT(*) FILTER (WHERE status IN ('RUNNING', 'FAILED')) as files_queued\n    FROM connector_sync_logs \n    WHERE sync_started_at >= NOW() - INTERVAL '24 hours'\n    GROUP BY connector_id\n) recent_logs ON bc.id = recent_logs.connector_id\nWHERE bc.status = 'ACTIVE'\nORDER BY bc.last_sync_at DESC NULLS LAST;\n\n-- =============================================\n-- SAMPLE DATA SEEDS\n-- =============================================\n\n-- Insert default banks\nINSERT INTO banks (bank_code, bank_name, swift_code) VALUES\n('HDFC', 'HDFC Bank Limited', 'HDFCINBB'),\n('ICICI', 'ICICI Bank Limited', 'ICICINBB'),\n('AXIS', 'Axis Bank Limited', 'AXISINBB'),\n('SBI', 'State Bank of India', 'SBININBB'),\n('INDB', 'IndusInd Bank Limited', 'INDBINBB');\n\n-- Insert sample merchant\nINSERT INTO merchants (merchant_code, merchant_name) VALUES\n('DEMO001', 'Demo Merchant Ltd');\n\n-- Insert exception reasons\nINSERT INTO exception_reasons (reason_code, reason_label, severity, description) VALUES\n('UTR_MISSING', 'Missing UTR', 'HIGH', 'Bank UTR not found in transaction'),\n('AMT_MISMATCH', 'Amount Mismatch', 'MEDIUM', 'Transaction amount does not match bank entry'),\n('DUP_UTR', 'Duplicate UTR', 'MEDIUM', 'Same UTR found in multiple transactions'),\n('BANK_MISSING', 'Not in Bank File', 'HIGH', 'Transaction not found in bank statement'),\n('STATUS_PENDING', 'Status Pending', 'LOW', 'Transaction status requires manual review');\n\n-- System settings\nINSERT INTO system_settings (setting_key, setting_value, setting_type, description) VALUES\n('recon_match_threshold', '85.0', 'INTEGER', 'Minimum confidence score for automatic matching'),\n('max_sync_frequency_minutes', '15', 'INTEGER', 'Minimum time between connector syncs'),\n('auto_match_enabled', 'true', 'BOOLEAN', 'Enable automatic transaction matching'),\n('dashboard_refresh_interval', '30', 'INTEGER', 'Dashboard auto-refresh interval in seconds');\n\nCOMMENT ON DATABASE postgres IS 'SettlePaisa 2.0 Reconciliation System Database';",
      "deps": [],
      "materialized": false
    },
    "v_top_exception_reasons": {
      "sql": "-- SettlePaisa 2.0 Reconciliation Database Schema\n-- Designed for payment transaction reconciliation and settlement tracking\n\n-- Enable UUID extension for PostgreSQL\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\"; -- For text search optimization\n\n-- =============================================\n-- CORE TABLES\n-- =============================================\n\n-- Merchants table\nCREATE TABLE merchants (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    merchant_code VARCHAR(50) UNIQUE NOT NULL,\n    merchant_name VARCHAR(255) NOT NULL,\n    status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'SUSPENDED', 'CLOSED')),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Banks and financial institutions\nCREATE TABLE banks (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    bank_code VARCHAR(10) UNIQUE NOT NULL, -- HDFC, ICICI, AXIS, SBI, etc.\n    bank_name VARCHAR(100) NOT NULL,\n    swift_code VARCHAR(11),\n    country_code CHAR(2) DEFAULT 'IN',\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Bank connectors (SFTP/API connections)\nCREATE TABLE bank_connectors (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    bank_id UUID NOT NULL REFERENCES banks(id),\n    connector_name VARCHAR(100) NOT NULL, -- \"HDFC Bank SFTP\", \"ICICI API\"\n    connector_type VARCHAR(10) NOT NULL CHECK (connector_type IN ('SFTP', 'API', 'EMAIL')),\n    connection_config JSONB, -- Stores SFTP details, API endpoints, credentials ref\n    status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'DISABLED', 'MAINTENANCE')),\n    last_sync_at TIMESTAMP WITH TIME ZONE,\n    sync_frequency_minutes INTEGER DEFAULT 30, -- How often to sync\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =============================================\n-- TRANSACTION PIPELINE TABLES\n-- =============================================\n\n-- Main transactions table - captures all payment transactions\nCREATE TABLE transactions (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- Transaction identifiers\n    transaction_id VARCHAR(100) UNIQUE NOT NULL, -- PG transaction ID\n    utr VARCHAR(50), -- Unique Transaction Reference from bank\n    rrn VARCHAR(50), -- Retrieval Reference Number\n    \n    -- Transaction details\n    merchant_id UUID NOT NULL REFERENCES merchants(id),\n    amount_paise BIGINT NOT NULL, -- Amount in paise (\u20b91 = 100 paise)\n    currency CHAR(3) DEFAULT 'INR',\n    \n    -- Dates and timing\n    transaction_date DATE NOT NULL,\n    transaction_time TIMESTAMP WITH TIME ZONE NOT NULL,\n    captured_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Settlement pipeline status\n    pipeline_status VARCHAR(20) DEFAULT 'CAPTURED' CHECK (\n        pipeline_status IN ('CAPTURED', 'IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED', 'FAILED', 'CANCELLED')\n    ),\n    settlement_date DATE,\n    credited_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Bank information\n    bank_id UUID REFERENCES banks(id),\n    bank_account_number VARCHAR(50),\n    ifsc_code VARCHAR(11),\n    \n    -- Data source tracking\n    data_source VARCHAR(20) DEFAULT 'MANUAL' CHECK (data_source IN ('MANUAL', 'CONNECTOR')),\n    source_connector_id UUID REFERENCES bank_connectors(id),\n    \n    -- Metadata\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Indexes\n    CONSTRAINT valid_amount CHECK (amount_paise > 0),\n    CONSTRAINT valid_dates CHECK (credited_at IS NULL OR credited_at >= captured_at)\n);\n\n-- Bank statements/files received from connectors\nCREATE TABLE bank_statements (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- File information\n    bank_id UUID NOT NULL REFERENCES banks(id),\n    connector_id UUID REFERENCES bank_connectors(id),\n    statement_date DATE NOT NULL,\n    file_name VARCHAR(255),\n    file_hash VARCHAR(64), -- SHA-256 for duplicate detection\n    \n    -- Processing status\n    status VARCHAR(20) DEFAULT 'RECEIVED' CHECK (\n        status IN ('RECEIVED', 'PROCESSING', 'PROCESSED', 'FAILED', 'DUPLICATE')\n    ),\n    total_records INTEGER,\n    processed_records INTEGER DEFAULT 0,\n    \n    -- Timing\n    received_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    processed_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Raw file content (optional)\n    raw_content TEXT,\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Individual bank statement entries\nCREATE TABLE bank_statement_entries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- Link to statement file\n    statement_id UUID NOT NULL REFERENCES bank_statements(id),\n    line_number INTEGER NOT NULL,\n    \n    -- Bank entry details\n    utr VARCHAR(50),\n    amount_paise BIGINT NOT NULL,\n    transaction_date DATE NOT NULL,\n    description TEXT,\n    debit_credit CHAR(1) CHECK (debit_credit IN ('D', 'C')),\n    balance_paise BIGINT,\n    \n    -- Reconciliation status\n    is_matched BOOLEAN DEFAULT false,\n    matched_transaction_id UUID REFERENCES transactions(id),\n    match_confidence DECIMAL(5,2), -- 0.00 to 100.00\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    CONSTRAINT unique_statement_line UNIQUE (statement_id, line_number)\n);\n\n-- =============================================\n-- RECONCILIATION TABLES\n-- =============================================\n\n-- Reconciliation matches between transactions and bank entries\nCREATE TABLE reconciliation_matches (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- What's being matched\n    transaction_id UUID NOT NULL REFERENCES transactions(id),\n    bank_entry_id UUID NOT NULL REFERENCES bank_statement_entries(id),\n    \n    -- Match quality\n    match_type VARCHAR(20) NOT NULL CHECK (\n        match_type IN ('EXACT_UTR', 'AMOUNT_DATE', 'FUZZY', 'MANUAL')\n    ),\n    match_confidence DECIMAL(5,2) NOT NULL, -- 0.00 to 100.00\n    match_score JSONB, -- Detailed scoring breakdown\n    \n    -- Status\n    status VARCHAR(20) DEFAULT 'PENDING' CHECK (\n        status IN ('PENDING', 'CONFIRMED', 'DISPUTED', 'REJECTED')\n    ),\n    \n    -- Audit trail\n    matched_by VARCHAR(20) DEFAULT 'SYSTEM' CHECK (matched_by IN ('SYSTEM', 'MANUAL')),\n    matched_by_user_id UUID, -- When manually matched\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    confirmed_at TIMESTAMP WITH TIME ZONE,\n    \n    CONSTRAINT unique_transaction_match UNIQUE (transaction_id, bank_entry_id)\n);\n\n-- =============================================\n-- EXCEPTION MANAGEMENT\n-- =============================================\n\n-- Exception reasons lookup\nCREATE TABLE exception_reasons (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    reason_code VARCHAR(50) UNIQUE NOT NULL, -- UTR_MISSING, AMT_MISMATCH, etc.\n    reason_label VARCHAR(100) NOT NULL,\n    severity VARCHAR(10) DEFAULT 'MEDIUM' CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),\n    description TEXT,\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Reconciliation exceptions\nCREATE TABLE reconciliation_exceptions (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- What has the exception\n    transaction_id UUID REFERENCES transactions(id),\n    bank_entry_id UUID REFERENCES bank_statement_entries(id),\n    \n    -- Exception details\n    reason_id UUID NOT NULL REFERENCES exception_reasons(id),\n    severity VARCHAR(10) NOT NULL CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),\n    \n    -- Status and resolution\n    status VARCHAR(20) DEFAULT 'OPEN' CHECK (\n        status IN ('OPEN', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', 'ESCALATED')\n    ),\n    \n    -- Assignment\n    assigned_to UUID, -- User ID from authentication system\n    assigned_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Resolution\n    resolution_notes TEXT,\n    resolved_by UUID, -- User ID\n    resolved_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Additional context\n    exception_data JSONB, -- Flexible field for exception-specific data\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    CONSTRAINT transaction_or_bank_entry CHECK (\n        transaction_id IS NOT NULL OR bank_entry_id IS NOT NULL\n    )\n);\n\n-- =============================================\n-- OPERATIONAL TABLES\n-- =============================================\n\n-- Connector sync logs\nCREATE TABLE connector_sync_logs (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    connector_id UUID NOT NULL REFERENCES bank_connectors(id),\n    sync_started_at TIMESTAMP WITH TIME ZONE NOT NULL,\n    sync_completed_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Results\n    status VARCHAR(20) NOT NULL CHECK (\n        status IN ('RUNNING', 'SUCCESS', 'FAILED', 'TIMEOUT', 'CANCELLED')\n    ),\n    files_found INTEGER DEFAULT 0,\n    files_processed INTEGER DEFAULT 0,\n    records_processed INTEGER DEFAULT 0,\n    \n    -- Error information\n    error_message TEXT,\n    error_details JSONB,\n    \n    -- Performance metrics\n    duration_seconds INTEGER,\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- System configuration and settings\nCREATE TABLE system_settings (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    setting_key VARCHAR(100) UNIQUE NOT NULL,\n    setting_value TEXT NOT NULL,\n    setting_type VARCHAR(20) DEFAULT 'STRING' CHECK (\n        setting_type IN ('STRING', 'INTEGER', 'BOOLEAN', 'JSON')\n    ),\n    description TEXT,\n    is_sensitive BOOLEAN DEFAULT false, -- For passwords, API keys, etc.\n    updated_by UUID, -- User ID\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =============================================\n-- INDEXES FOR PERFORMANCE\n-- =============================================\n\n-- Transaction indexes\nCREATE INDEX idx_transactions_merchant_date ON transactions(merchant_id, transaction_date);\nCREATE INDEX idx_transactions_utr ON transactions(utr) WHERE utr IS NOT NULL;\nCREATE INDEX idx_transactions_pipeline_status ON transactions(pipeline_status);\nCREATE INDEX idx_transactions_amount_date ON transactions(amount_paise, transaction_date);\nCREATE INDEX idx_transactions_bank ON transactions(bank_id) WHERE bank_id IS NOT NULL;\nCREATE INDEX idx_transactions_source ON transactions(data_source, source_connector_id);\n\n-- Bank statement indexes\nCREATE INDEX idx_bank_statements_date_bank ON bank_statements(statement_date, bank_id);\nCREATE INDEX idx_bank_statements_status ON bank_statements(status);\nCREATE INDEX idx_bank_statements_hash ON bank_statements(file_hash);\n\n-- Bank entry indexes\nCREATE INDEX idx_bank_entries_utr ON bank_statement_entries(utr) WHERE utr IS NOT NULL;\nCREATE INDEX idx_bank_entries_amount_date ON bank_statement_entries(amount_paise, transaction_date);\nCREATE INDEX idx_bank_entries_matched ON bank_statement_entries(is_matched, matched_transaction_id);\n\n-- Reconciliation indexes\nCREATE INDEX idx_recon_matches_status ON reconciliation_matches(status);\nCREATE INDEX idx_recon_matches_confidence ON reconciliation_matches(match_confidence);\nCREATE INDEX idx_recon_matches_type ON reconciliation_matches(match_type);\n\n-- Exception indexes\nCREATE INDEX idx_exceptions_status ON reconciliation_exceptions(status);\nCREATE INDEX idx_exceptions_severity ON reconciliation_exceptions(severity);\nCREATE INDEX idx_exceptions_assigned ON reconciliation_exceptions(assigned_to) WHERE assigned_to IS NOT NULL;\nCREATE INDEX idx_exceptions_created ON reconciliation_exceptions(created_at);\n\n-- Connector indexes\nCREATE INDEX idx_connector_logs_connector_time ON connector_sync_logs(connector_id, sync_started_at);\nCREATE INDEX idx_connector_logs_status ON connector_sync_logs(status);\n\n-- Text search indexes\nCREATE INDEX idx_transactions_search ON transactions USING gin(to_tsvector('english', transaction_id || ' ' || COALESCE(utr, '')));\nCREATE INDEX idx_bank_entries_search ON bank_statement_entries USING gin(to_tsvector('english', COALESCE(utr, '') || ' ' || COALESCE(description, '')));\n\n-- =============================================\n-- TRIGGERS FOR AUDIT TRAIL\n-- =============================================\n\n-- Function to update updated_at timestamp\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Apply updated_at triggers\nCREATE TRIGGER update_transactions_updated_at BEFORE UPDATE ON transactions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_merchants_updated_at BEFORE UPDATE ON merchants FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_bank_connectors_updated_at BEFORE UPDATE ON bank_connectors FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_exceptions_updated_at BEFORE UPDATE ON reconciliation_exceptions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- =============================================\n-- VIEWS FOR DASHBOARD QUERIES\n-- =============================================\n\n-- View for pipeline overview\nCREATE VIEW v_pipeline_overview AS\nSELECT \n    COUNT(*) as total_captured,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED')) as in_settlement,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('SENT_TO_BANK', 'CREDITED')) as sent_to_bank,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CREDITED') as credited,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CAPTURED') as unsettled,\n    SUM(amount_paise) as total_value_paise,\n    SUM(amount_paise) FILTER (WHERE pipeline_status = 'CREDITED') as credited_value_paise\nFROM transactions \nWHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days';\n\n-- View for source breakdown\nCREATE VIEW v_source_breakdown AS\nSELECT \n    CASE \n        WHEN data_source = 'MANUAL' THEN 'MANUAL'\n        ELSE 'CONNECTORS'\n    END as source,\n    COUNT(*) as captured,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED')) as in_settlement,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('SENT_TO_BANK', 'CREDITED')) as sent_to_bank,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CREDITED') as credited,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CAPTURED') as unsettled,\n    ROUND(\n        (COUNT(*) FILTER (WHERE pipeline_status != 'CAPTURED')::DECIMAL / COUNT(*) * 100), 1\n    ) as match_rate_pct\nFROM transactions \nWHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY source;\n\n-- View for top exception reasons\nCREATE VIEW v_top_exception_reasons AS\nSELECT \n    er.reason_code,\n    er.reason_label,\n    COUNT(*) as impacted_txns,\n    ROUND(\n        COUNT(*)::DECIMAL / (SELECT COUNT(*) FROM reconciliation_exceptions WHERE status = 'OPEN') * 100, 0\n    ) as percentage\nFROM reconciliation_exceptions re\nJOIN exception_reasons er ON re.reason_id = er.id\nWHERE re.status = 'OPEN'\nGROUP BY er.reason_code, er.reason_label\nORDER BY impacted_txns DESC\nLIMIT 10;\n\n-- View for connector health\nCREATE VIEW v_connector_health AS\nSELECT \n    bc.connector_name,\n    bc.status,\n    bc.last_sync_at,\n    COALESCE(recent_logs.files_queued, 0) as queued_files,\n    COALESCE(recent_logs.recent_failures, 0) as failures\nFROM bank_connectors bc\nLEFT JOIN (\n    SELECT \n        connector_id,\n        COUNT(*) FILTER (WHERE status = 'FAILED') as recent_failures,\n        COUNT(*) FILTER (WHERE status IN ('RUNNING', 'FAILED')) as files_queued\n    FROM connector_sync_logs \n    WHERE sync_started_at >= NOW() - INTERVAL '24 hours'\n    GROUP BY connector_id\n) recent_logs ON bc.id = recent_logs.connector_id\nWHERE bc.status = 'ACTIVE'\nORDER BY bc.last_sync_at DESC NULLS LAST;\n\n-- =============================================\n-- SAMPLE DATA SEEDS\n-- =============================================\n\n-- Insert default banks\nINSERT INTO banks (bank_code, bank_name, swift_code) VALUES\n('HDFC', 'HDFC Bank Limited', 'HDFCINBB'),\n('ICICI', 'ICICI Bank Limited', 'ICICINBB'),\n('AXIS', 'Axis Bank Limited', 'AXISINBB'),\n('SBI', 'State Bank of India', 'SBININBB'),\n('INDB', 'IndusInd Bank Limited', 'INDBINBB');\n\n-- Insert sample merchant\nINSERT INTO merchants (merchant_code, merchant_name) VALUES\n('DEMO001', 'Demo Merchant Ltd');\n\n-- Insert exception reasons\nINSERT INTO exception_reasons (reason_code, reason_label, severity, description) VALUES\n('UTR_MISSING', 'Missing UTR', 'HIGH', 'Bank UTR not found in transaction'),\n('AMT_MISMATCH', 'Amount Mismatch', 'MEDIUM', 'Transaction amount does not match bank entry'),\n('DUP_UTR', 'Duplicate UTR', 'MEDIUM', 'Same UTR found in multiple transactions'),\n('BANK_MISSING', 'Not in Bank File', 'HIGH', 'Transaction not found in bank statement'),\n('STATUS_PENDING', 'Status Pending', 'LOW', 'Transaction status requires manual review');\n\n-- System settings\nINSERT INTO system_settings (setting_key, setting_value, setting_type, description) VALUES\n('recon_match_threshold', '85.0', 'INTEGER', 'Minimum confidence score for automatic matching'),\n('max_sync_frequency_minutes', '15', 'INTEGER', 'Minimum time between connector syncs'),\n('auto_match_enabled', 'true', 'BOOLEAN', 'Enable automatic transaction matching'),\n('dashboard_refresh_interval', '30', 'INTEGER', 'Dashboard auto-refresh interval in seconds');\n\nCOMMENT ON DATABASE postgres IS 'SettlePaisa 2.0 Reconciliation System Database';",
      "deps": [],
      "materialized": false
    },
    "v_connector_health": {
      "sql": "-- SettlePaisa 2.0 Reconciliation Database Schema\n-- Designed for payment transaction reconciliation and settlement tracking\n\n-- Enable UUID extension for PostgreSQL\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\"; -- For text search optimization\n\n-- =============================================\n-- CORE TABLES\n-- =============================================\n\n-- Merchants table\nCREATE TABLE merchants (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    merchant_code VARCHAR(50) UNIQUE NOT NULL,\n    merchant_name VARCHAR(255) NOT NULL,\n    status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'SUSPENDED', 'CLOSED')),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Banks and financial institutions\nCREATE TABLE banks (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    bank_code VARCHAR(10) UNIQUE NOT NULL, -- HDFC, ICICI, AXIS, SBI, etc.\n    bank_name VARCHAR(100) NOT NULL,\n    swift_code VARCHAR(11),\n    country_code CHAR(2) DEFAULT 'IN',\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Bank connectors (SFTP/API connections)\nCREATE TABLE bank_connectors (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    bank_id UUID NOT NULL REFERENCES banks(id),\n    connector_name VARCHAR(100) NOT NULL, -- \"HDFC Bank SFTP\", \"ICICI API\"\n    connector_type VARCHAR(10) NOT NULL CHECK (connector_type IN ('SFTP', 'API', 'EMAIL')),\n    connection_config JSONB, -- Stores SFTP details, API endpoints, credentials ref\n    status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'DISABLED', 'MAINTENANCE')),\n    last_sync_at TIMESTAMP WITH TIME ZONE,\n    sync_frequency_minutes INTEGER DEFAULT 30, -- How often to sync\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =============================================\n-- TRANSACTION PIPELINE TABLES\n-- =============================================\n\n-- Main transactions table - captures all payment transactions\nCREATE TABLE transactions (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- Transaction identifiers\n    transaction_id VARCHAR(100) UNIQUE NOT NULL, -- PG transaction ID\n    utr VARCHAR(50), -- Unique Transaction Reference from bank\n    rrn VARCHAR(50), -- Retrieval Reference Number\n    \n    -- Transaction details\n    merchant_id UUID NOT NULL REFERENCES merchants(id),\n    amount_paise BIGINT NOT NULL, -- Amount in paise (\u20b91 = 100 paise)\n    currency CHAR(3) DEFAULT 'INR',\n    \n    -- Dates and timing\n    transaction_date DATE NOT NULL,\n    transaction_time TIMESTAMP WITH TIME ZONE NOT NULL,\n    captured_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Settlement pipeline status\n    pipeline_status VARCHAR(20) DEFAULT 'CAPTURED' CHECK (\n        pipeline_status IN ('CAPTURED', 'IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED', 'FAILED', 'CANCELLED')\n    ),\n    settlement_date DATE,\n    credited_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Bank information\n    bank_id UUID REFERENCES banks(id),\n    bank_account_number VARCHAR(50),\n    ifsc_code VARCHAR(11),\n    \n    -- Data source tracking\n    data_source VARCHAR(20) DEFAULT 'MANUAL' CHECK (data_source IN ('MANUAL', 'CONNECTOR')),\n    source_connector_id UUID REFERENCES bank_connectors(id),\n    \n    -- Metadata\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Indexes\n    CONSTRAINT valid_amount CHECK (amount_paise > 0),\n    CONSTRAINT valid_dates CHECK (credited_at IS NULL OR credited_at >= captured_at)\n);\n\n-- Bank statements/files received from connectors\nCREATE TABLE bank_statements (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- File information\n    bank_id UUID NOT NULL REFERENCES banks(id),\n    connector_id UUID REFERENCES bank_connectors(id),\n    statement_date DATE NOT NULL,\n    file_name VARCHAR(255),\n    file_hash VARCHAR(64), -- SHA-256 for duplicate detection\n    \n    -- Processing status\n    status VARCHAR(20) DEFAULT 'RECEIVED' CHECK (\n        status IN ('RECEIVED', 'PROCESSING', 'PROCESSED', 'FAILED', 'DUPLICATE')\n    ),\n    total_records INTEGER,\n    processed_records INTEGER DEFAULT 0,\n    \n    -- Timing\n    received_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    processed_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Raw file content (optional)\n    raw_content TEXT,\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Individual bank statement entries\nCREATE TABLE bank_statement_entries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- Link to statement file\n    statement_id UUID NOT NULL REFERENCES bank_statements(id),\n    line_number INTEGER NOT NULL,\n    \n    -- Bank entry details\n    utr VARCHAR(50),\n    amount_paise BIGINT NOT NULL,\n    transaction_date DATE NOT NULL,\n    description TEXT,\n    debit_credit CHAR(1) CHECK (debit_credit IN ('D', 'C')),\n    balance_paise BIGINT,\n    \n    -- Reconciliation status\n    is_matched BOOLEAN DEFAULT false,\n    matched_transaction_id UUID REFERENCES transactions(id),\n    match_confidence DECIMAL(5,2), -- 0.00 to 100.00\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    CONSTRAINT unique_statement_line UNIQUE (statement_id, line_number)\n);\n\n-- =============================================\n-- RECONCILIATION TABLES\n-- =============================================\n\n-- Reconciliation matches between transactions and bank entries\nCREATE TABLE reconciliation_matches (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- What's being matched\n    transaction_id UUID NOT NULL REFERENCES transactions(id),\n    bank_entry_id UUID NOT NULL REFERENCES bank_statement_entries(id),\n    \n    -- Match quality\n    match_type VARCHAR(20) NOT NULL CHECK (\n        match_type IN ('EXACT_UTR', 'AMOUNT_DATE', 'FUZZY', 'MANUAL')\n    ),\n    match_confidence DECIMAL(5,2) NOT NULL, -- 0.00 to 100.00\n    match_score JSONB, -- Detailed scoring breakdown\n    \n    -- Status\n    status VARCHAR(20) DEFAULT 'PENDING' CHECK (\n        status IN ('PENDING', 'CONFIRMED', 'DISPUTED', 'REJECTED')\n    ),\n    \n    -- Audit trail\n    matched_by VARCHAR(20) DEFAULT 'SYSTEM' CHECK (matched_by IN ('SYSTEM', 'MANUAL')),\n    matched_by_user_id UUID, -- When manually matched\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    confirmed_at TIMESTAMP WITH TIME ZONE,\n    \n    CONSTRAINT unique_transaction_match UNIQUE (transaction_id, bank_entry_id)\n);\n\n-- =============================================\n-- EXCEPTION MANAGEMENT\n-- =============================================\n\n-- Exception reasons lookup\nCREATE TABLE exception_reasons (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    reason_code VARCHAR(50) UNIQUE NOT NULL, -- UTR_MISSING, AMT_MISMATCH, etc.\n    reason_label VARCHAR(100) NOT NULL,\n    severity VARCHAR(10) DEFAULT 'MEDIUM' CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),\n    description TEXT,\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Reconciliation exceptions\nCREATE TABLE reconciliation_exceptions (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- What has the exception\n    transaction_id UUID REFERENCES transactions(id),\n    bank_entry_id UUID REFERENCES bank_statement_entries(id),\n    \n    -- Exception details\n    reason_id UUID NOT NULL REFERENCES exception_reasons(id),\n    severity VARCHAR(10) NOT NULL CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),\n    \n    -- Status and resolution\n    status VARCHAR(20) DEFAULT 'OPEN' CHECK (\n        status IN ('OPEN', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', 'ESCALATED')\n    ),\n    \n    -- Assignment\n    assigned_to UUID, -- User ID from authentication system\n    assigned_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Resolution\n    resolution_notes TEXT,\n    resolved_by UUID, -- User ID\n    resolved_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Additional context\n    exception_data JSONB, -- Flexible field for exception-specific data\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    CONSTRAINT transaction_or_bank_entry CHECK (\n        transaction_id IS NOT NULL OR bank_entry_id IS NOT NULL\n    )\n);\n\n-- =============================================\n-- OPERATIONAL TABLES\n-- =============================================\n\n-- Connector sync logs\nCREATE TABLE connector_sync_logs (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    connector_id UUID NOT NULL REFERENCES bank_connectors(id),\n    sync_started_at TIMESTAMP WITH TIME ZONE NOT NULL,\n    sync_completed_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Results\n    status VARCHAR(20) NOT NULL CHECK (\n        status IN ('RUNNING', 'SUCCESS', 'FAILED', 'TIMEOUT', 'CANCELLED')\n    ),\n    files_found INTEGER DEFAULT 0,\n    files_processed INTEGER DEFAULT 0,\n    records_processed INTEGER DEFAULT 0,\n    \n    -- Error information\n    error_message TEXT,\n    error_details JSONB,\n    \n    -- Performance metrics\n    duration_seconds INTEGER,\n    \n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- System configuration and settings\nCREATE TABLE system_settings (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    setting_key VARCHAR(100) UNIQUE NOT NULL,\n    setting_value TEXT NOT NULL,\n    setting_type VARCHAR(20) DEFAULT 'STRING' CHECK (\n        setting_type IN ('STRING', 'INTEGER', 'BOOLEAN', 'JSON')\n    ),\n    description TEXT,\n    is_sensitive BOOLEAN DEFAULT false, -- For passwords, API keys, etc.\n    updated_by UUID, -- User ID\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =============================================\n-- INDEXES FOR PERFORMANCE\n-- =============================================\n\n-- Transaction indexes\nCREATE INDEX idx_transactions_merchant_date ON transactions(merchant_id, transaction_date);\nCREATE INDEX idx_transactions_utr ON transactions(utr) WHERE utr IS NOT NULL;\nCREATE INDEX idx_transactions_pipeline_status ON transactions(pipeline_status);\nCREATE INDEX idx_transactions_amount_date ON transactions(amount_paise, transaction_date);\nCREATE INDEX idx_transactions_bank ON transactions(bank_id) WHERE bank_id IS NOT NULL;\nCREATE INDEX idx_transactions_source ON transactions(data_source, source_connector_id);\n\n-- Bank statement indexes\nCREATE INDEX idx_bank_statements_date_bank ON bank_statements(statement_date, bank_id);\nCREATE INDEX idx_bank_statements_status ON bank_statements(status);\nCREATE INDEX idx_bank_statements_hash ON bank_statements(file_hash);\n\n-- Bank entry indexes\nCREATE INDEX idx_bank_entries_utr ON bank_statement_entries(utr) WHERE utr IS NOT NULL;\nCREATE INDEX idx_bank_entries_amount_date ON bank_statement_entries(amount_paise, transaction_date);\nCREATE INDEX idx_bank_entries_matched ON bank_statement_entries(is_matched, matched_transaction_id);\n\n-- Reconciliation indexes\nCREATE INDEX idx_recon_matches_status ON reconciliation_matches(status);\nCREATE INDEX idx_recon_matches_confidence ON reconciliation_matches(match_confidence);\nCREATE INDEX idx_recon_matches_type ON reconciliation_matches(match_type);\n\n-- Exception indexes\nCREATE INDEX idx_exceptions_status ON reconciliation_exceptions(status);\nCREATE INDEX idx_exceptions_severity ON reconciliation_exceptions(severity);\nCREATE INDEX idx_exceptions_assigned ON reconciliation_exceptions(assigned_to) WHERE assigned_to IS NOT NULL;\nCREATE INDEX idx_exceptions_created ON reconciliation_exceptions(created_at);\n\n-- Connector indexes\nCREATE INDEX idx_connector_logs_connector_time ON connector_sync_logs(connector_id, sync_started_at);\nCREATE INDEX idx_connector_logs_status ON connector_sync_logs(status);\n\n-- Text search indexes\nCREATE INDEX idx_transactions_search ON transactions USING gin(to_tsvector('english', transaction_id || ' ' || COALESCE(utr, '')));\nCREATE INDEX idx_bank_entries_search ON bank_statement_entries USING gin(to_tsvector('english', COALESCE(utr, '') || ' ' || COALESCE(description, '')));\n\n-- =============================================\n-- TRIGGERS FOR AUDIT TRAIL\n-- =============================================\n\n-- Function to update updated_at timestamp\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Apply updated_at triggers\nCREATE TRIGGER update_transactions_updated_at BEFORE UPDATE ON transactions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_merchants_updated_at BEFORE UPDATE ON merchants FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_bank_connectors_updated_at BEFORE UPDATE ON bank_connectors FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_exceptions_updated_at BEFORE UPDATE ON reconciliation_exceptions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- =============================================\n-- VIEWS FOR DASHBOARD QUERIES\n-- =============================================\n\n-- View for pipeline overview\nCREATE VIEW v_pipeline_overview AS\nSELECT \n    COUNT(*) as total_captured,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED')) as in_settlement,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('SENT_TO_BANK', 'CREDITED')) as sent_to_bank,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CREDITED') as credited,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CAPTURED') as unsettled,\n    SUM(amount_paise) as total_value_paise,\n    SUM(amount_paise) FILTER (WHERE pipeline_status = 'CREDITED') as credited_value_paise\nFROM transactions \nWHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days';\n\n-- View for source breakdown\nCREATE VIEW v_source_breakdown AS\nSELECT \n    CASE \n        WHEN data_source = 'MANUAL' THEN 'MANUAL'\n        ELSE 'CONNECTORS'\n    END as source,\n    COUNT(*) as captured,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('IN_SETTLEMENT', 'SENT_TO_BANK', 'CREDITED')) as in_settlement,\n    COUNT(*) FILTER (WHERE pipeline_status IN ('SENT_TO_BANK', 'CREDITED')) as sent_to_bank,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CREDITED') as credited,\n    COUNT(*) FILTER (WHERE pipeline_status = 'CAPTURED') as unsettled,\n    ROUND(\n        (COUNT(*) FILTER (WHERE pipeline_status != 'CAPTURED')::DECIMAL / COUNT(*) * 100), 1\n    ) as match_rate_pct\nFROM transactions \nWHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY source;\n\n-- View for top exception reasons\nCREATE VIEW v_top_exception_reasons AS\nSELECT \n    er.reason_code,\n    er.reason_label,\n    COUNT(*) as impacted_txns,\n    ROUND(\n        COUNT(*)::DECIMAL / (SELECT COUNT(*) FROM reconciliation_exceptions WHERE status = 'OPEN') * 100, 0\n    ) as percentage\nFROM reconciliation_exceptions re\nJOIN exception_reasons er ON re.reason_id = er.id\nWHERE re.status = 'OPEN'\nGROUP BY er.reason_code, er.reason_label\nORDER BY impacted_txns DESC\nLIMIT 10;\n\n-- View for connector health\nCREATE VIEW v_connector_health AS\nSELECT \n    bc.connector_name,\n    bc.status,\n    bc.last_sync_at,\n    COALESCE(recent_logs.files_queued, 0) as queued_files,\n    COALESCE(recent_logs.recent_failures, 0) as failures\nFROM bank_connectors bc\nLEFT JOIN (\n    SELECT \n        connector_id,\n        COUNT(*) FILTER (WHERE status = 'FAILED') as recent_failures,\n        COUNT(*) FILTER (WHERE status IN ('RUNNING', 'FAILED')) as files_queued\n    FROM connector_sync_logs \n    WHERE sync_started_at >= NOW() - INTERVAL '24 hours'\n    GROUP BY connector_id\n) recent_logs ON bc.id = recent_logs.connector_id\nWHERE bc.status = 'ACTIVE'\nORDER BY bc.last_sync_at DESC NULLS LAST;\n\n-- =============================================\n-- SAMPLE DATA SEEDS\n-- =============================================\n\n-- Insert default banks\nINSERT INTO banks (bank_code, bank_name, swift_code) VALUES\n('HDFC', 'HDFC Bank Limited', 'HDFCINBB'),\n('ICICI', 'ICICI Bank Limited', 'ICICINBB'),\n('AXIS', 'Axis Bank Limited', 'AXISINBB'),\n('SBI', 'State Bank of India', 'SBININBB'),\n('INDB', 'IndusInd Bank Limited', 'INDBINBB');\n\n-- Insert sample merchant\nINSERT INTO merchants (merchant_code, merchant_name) VALUES\n('DEMO001', 'Demo Merchant Ltd');\n\n-- Insert exception reasons\nINSERT INTO exception_reasons (reason_code, reason_label, severity, description) VALUES\n('UTR_MISSING', 'Missing UTR', 'HIGH', 'Bank UTR not found in transaction'),\n('AMT_MISMATCH', 'Amount Mismatch', 'MEDIUM', 'Transaction amount does not match bank entry'),\n('DUP_UTR', 'Duplicate UTR', 'MEDIUM', 'Same UTR found in multiple transactions'),\n('BANK_MISSING', 'Not in Bank File', 'HIGH', 'Transaction not found in bank statement'),\n('STATUS_PENDING', 'Status Pending', 'LOW', 'Transaction status requires manual review');\n\n-- System settings\nINSERT INTO system_settings (setting_key, setting_value, setting_type, description) VALUES\n('recon_match_threshold', '85.0', 'INTEGER', 'Minimum confidence score for automatic matching'),\n('max_sync_frequency_minutes', '15', 'INTEGER', 'Minimum time between connector syncs'),\n('auto_match_enabled', 'true', 'BOOLEAN', 'Enable automatic transaction matching'),\n('dashboard_refresh_interval', '30', 'INTEGER', 'Dashboard auto-refresh interval in seconds');\n\nCOMMENT ON DATABASE postgres IS 'SettlePaisa 2.0 Reconciliation System Database';",
      "deps": [],
      "materialized": false
    },
    "connector_health": {
      "sql": "-- SettlePaisa Ops Dashboard Database Schema\n-- Version: 1.0.0\n\n-- Create database if not exists\nSELECT 'CREATE DATABASE ops_dashboard'\nWHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ops_dashboard')\\gexec\n\n-- Use the ops_dashboard database\n\\c ops_dashboard;\n\n-- Enable required extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pgcrypto\";\n\n-- =====================================================\n-- DATA SOURCE TABLES\n-- =====================================================\n\n-- Data Source (Connectors)\nCREATE TABLE IF NOT EXISTS data_source (\n    source_id VARCHAR(50) PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    type VARCHAR(20) NOT NULL CHECK (type IN ('PG_HTTP_API', 'PG_DB_PULL', 'BANK_SFTP', 'BANK_HTTP_API')),\n    merchant_id VARCHAR(50),\n    acquirer_code VARCHAR(20),\n    path_or_endpoint TEXT NOT NULL,\n    file_glob VARCHAR(100),\n    http_method VARCHAR(10),\n    headers_json JSONB,\n    mapping_template_id VARCHAR(50),\n    timezone VARCHAR(50) DEFAULT 'Asia/Kolkata',\n    is_enabled BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Data Source Secrets (KMS-encrypted)\nCREATE TABLE IF NOT EXISTS data_source_secret (\n    secret_id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n    source_id VARCHAR(50) NOT NULL REFERENCES data_source(source_id) ON DELETE CASCADE,\n    secret_type VARCHAR(20) NOT NULL CHECK (secret_type IN ('PASSWORD', 'API_KEY', 'SSH_KEY', 'CERTIFICATE')),\n    encrypted_value TEXT NOT NULL, -- KMS-encrypted\n    kms_key_id VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    UNIQUE(source_id, secret_type)\n);\n\n-- Ingestion Schedule\nCREATE TABLE IF NOT EXISTS ingest_schedule (\n    schedule_id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n    source_id VARCHAR(50) NOT NULL REFERENCES data_source(source_id) ON DELETE CASCADE,\n    cron_expr VARCHAR(50) NOT NULL, -- e.g., \"0 0 19 * * ?\" for 7 PM IST daily\n    next_run_at TIMESTAMP WITH TIME ZONE,\n    last_run_at TIMESTAMP WITH TIME ZONE,\n    is_paused BOOLEAN DEFAULT false,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    UNIQUE(source_id)\n);\n\n-- Ingestion Jobs\nCREATE TABLE IF NOT EXISTS ingest_job (\n    job_id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n    source_id VARCHAR(50) NOT NULL REFERENCES data_source(source_id),\n    cycle_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'QUEUED' CHECK (status IN ('QUEUED', 'RUNNING', 'SUCCEEDED', 'FAILED', 'DLQ')),\n    attempt INT DEFAULT 1,\n    max_attempt INT DEFAULT 3,\n    artifact_uri TEXT, -- S3 path to raw file\n    rows_ingested INT,\n    bytes_ingested BIGINT,\n    error_message TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    started_at TIMESTAMP WITH TIME ZONE,\n    completed_at TIMESTAMP WITH TIME ZONE,\n    duration_ms INT GENERATED ALWAYS AS (\n        CASE \n            WHEN completed_at IS NOT NULL AND started_at IS NOT NULL \n            THEN EXTRACT(EPOCH FROM (completed_at - started_at)) * 1000\n            ELSE NULL\n        END\n    ) STORED,\n    UNIQUE(source_id, cycle_date)\n);\n\n-- Ingestion Events (audit log)\nCREATE TABLE IF NOT EXISTS ingest_event (\n    event_id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n    job_id UUID NOT NULL REFERENCES ingest_job(job_id) ON DELETE CASCADE,\n    kind VARCHAR(20) NOT NULL CHECK (kind IN ('CONNECT', 'LIST', 'DOWNLOAD', 'DECRYPT', 'VERIFY', 'UPLOAD_RAW', 'COMPLETE', 'ERROR')),\n    payload JSONB,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =====================================================\n-- RECONCILIATION TABLES\n-- =====================================================\n\n-- Reconciliation Jobs\nCREATE TABLE IF NOT EXISTS recon_job (\n    job_id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n    cycle_date DATE NOT NULL,\n    pg_file_path TEXT,\n    bank_file_path TEXT,\n    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED')),\n    pg_total_amount BIGINT, -- in paise\n    bank_total_amount BIGINT, -- in paise\n    matched_count INT DEFAULT 0,\n    unmatched_pg_count INT DEFAULT 0,\n    unmatched_bank_count INT DEFAULT 0,\n    matched_amount BIGINT DEFAULT 0, -- in paise\n    variance_amount BIGINT DEFAULT 0, -- in paise\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    completed_at TIMESTAMP WITH TIME ZONE\n);\n\n-- Normalized Transactions\nCREATE TABLE IF NOT EXISTS normalized_transaction (\n    txn_id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n    job_id UUID NOT NULL REFERENCES recon_job(job_id) ON DELETE CASCADE,\n    source VARCHAR(10) NOT NULL CHECK (source IN ('PG', 'BANK')),\n    transaction_id VARCHAR(100) NOT NULL,\n    amount BIGINT NOT NULL, -- in paise\n    status VARCHAR(20),\n    transaction_date DATE,\n    merchant_ref VARCHAR(100),\n    bank_ref VARCHAR(100),\n    raw_data JSONB, -- original row data\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    INDEX idx_job_source (job_id, source),\n    INDEX idx_transaction_id (transaction_id)\n);\n\n-- Reconciliation Matches\nCREATE TABLE IF NOT EXISTS recon_match (\n    match_id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n    job_id UUID NOT NULL REFERENCES recon_job(job_id) ON DELETE CASCADE,\n    pg_txn_id UUID NOT NULL REFERENCES normalized_transaction(txn_id),\n    bank_txn_id UUID NOT NULL REFERENCES normalized_transaction(txn_id),\n    match_type VARCHAR(20) CHECK (match_type IN ('EXACT', 'FUZZY', 'MANUAL')),\n    confidence_score DECIMAL(3,2), -- 0.00 to 1.00\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Unmatched Transactions\nCREATE TABLE IF NOT EXISTS recon_unmatched (\n    unmatched_id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n    job_id UUID NOT NULL REFERENCES recon_job(job_id) ON DELETE CASCADE,\n    txn_id UUID NOT NULL REFERENCES normalized_transaction(txn_id),\n    source VARCHAR(10) NOT NULL CHECK (source IN ('PG', 'BANK')),\n    reason VARCHAR(100),\n    resolution_status VARCHAR(20) DEFAULT 'PENDING' CHECK (resolution_status IN ('PENDING', 'RESOLVED', 'ESCALATED')),\n    resolution_notes TEXT,\n    resolved_by VARCHAR(100),\n    resolved_at TIMESTAMP WITH TIME ZONE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =====================================================\n-- BANK SCHEMA CONFIGURATIONS\n-- =====================================================\n\n-- Bank Schema Templates\nCREATE TABLE IF NOT EXISTS bank_schema (\n    schema_id VARCHAR(50) PRIMARY KEY,\n    bank_name VARCHAR(100) NOT NULL,\n    schema_name VARCHAR(100) NOT NULL,\n    field_mappings JSONB NOT NULL, -- Maps standard fields to bank-specific column names\n    validation_rules JSONB,\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- =====================================================\n-- INDEXES\n-- =====================================================\n\nCREATE INDEX IF NOT EXISTS idx_data_source_type ON data_source(type);\nCREATE INDEX IF NOT EXISTS idx_data_source_enabled ON data_source(is_enabled);\nCREATE INDEX IF NOT EXISTS idx_ingest_job_source_status ON ingest_job(source_id, status);\nCREATE INDEX IF NOT EXISTS idx_ingest_job_cycle_date ON ingest_job(cycle_date);\nCREATE INDEX IF NOT EXISTS idx_ingest_event_job ON ingest_event(job_id);\nCREATE INDEX IF NOT EXISTS idx_recon_job_cycle_date ON recon_job(cycle_date);\nCREATE INDEX IF NOT EXISTS idx_recon_job_status ON recon_job(status);\n\n-- =====================================================\n-- SEED DATA\n-- =====================================================\n\n-- Insert default bank schemas\nINSERT INTO bank_schema (schema_id, bank_name, schema_name, field_mappings, is_active) VALUES\n('hdfc_standard', 'HDFC Bank', 'Standard Format', '{\n    \"transactionId\": {\"sourceColumn\": \"txn_id\", \"dataType\": \"string\"},\n    \"amount\": {\"sourceColumn\": \"amount\", \"dataType\": \"number\"},\n    \"status\": {\"sourceColumn\": \"status\", \"dataType\": \"string\"},\n    \"transactionDate\": {\"sourceColumn\": \"date\", \"dataType\": \"date\"},\n    \"merchantRef\": {\"sourceColumn\": \"merchant_ref\", \"dataType\": \"string\"},\n    \"bankRef\": {\"sourceColumn\": \"bank_ref\", \"dataType\": \"string\"}\n}'::jsonb, true),\n('icici_standard', 'ICICI Bank', 'Standard Format', '{\n    \"transactionId\": {\"sourceColumn\": \"transaction_id\", \"dataType\": \"string\"},\n    \"amount\": {\"sourceColumn\": \"transaction_amount\", \"dataType\": \"number\"},\n    \"status\": {\"sourceColumn\": \"transaction_status\", \"dataType\": \"string\"},\n    \"transactionDate\": {\"sourceColumn\": \"transaction_date\", \"dataType\": \"date\"},\n    \"merchantRef\": {\"sourceColumn\": \"order_id\", \"dataType\": \"string\"},\n    \"bankRef\": {\"sourceColumn\": \"bank_reference\", \"dataType\": \"string\"}\n}'::jsonb, true),\n('axis_standard', 'AXIS Bank', 'Standard Format', '{\n    \"transactionId\": {\"sourceColumn\": \"trans_id\", \"dataType\": \"string\"},\n    \"amount\": {\"sourceColumn\": \"trans_amt\", \"dataType\": \"number\"},\n    \"status\": {\"sourceColumn\": \"trans_status\", \"dataType\": \"string\"},\n    \"transactionDate\": {\"sourceColumn\": \"trans_dt\", \"dataType\": \"date\"},\n    \"merchantRef\": {\"sourceColumn\": \"order_ref\", \"dataType\": \"string\"},\n    \"bankRef\": {\"sourceColumn\": \"bank_txn_id\", \"dataType\": \"string\"}\n}'::jsonb, true)\nON CONFLICT (schema_id) DO NOTHING;\n\n-- Insert demo connectors\nINSERT INTO data_source (source_id, name, type, path_or_endpoint, file_glob, is_enabled) VALUES\n('demo_hdfc_sftp', 'HDFC Bank SFTP (Demo)', 'BANK_SFTP', '/upload', 'hdfc_*.csv', true),\n('demo_icici_sftp', 'ICICI Bank SFTP (Demo)', 'BANK_SFTP', '/upload', 'icici_*.csv', true),\n('demo_axis_sftp', 'AXIS Bank SFTP (Demo)', 'BANK_SFTP', '/upload', 'axis_*.csv', true),\n('demo_pg_api', 'Payment Gateway API (Demo)', 'PG_HTTP_API', 'https://api.example.com/transactions', NULL, true)\nON CONFLICT (source_id) DO NOTHING;\n\n-- Insert demo schedules\nINSERT INTO ingest_schedule (source_id, cron_expr, is_paused) VALUES\n('demo_hdfc_sftp', '0 0 19 * * ?', false), -- Daily at 7 PM IST\n('demo_icici_sftp', '0 30 19 * * ?', false), -- Daily at 7:30 PM IST\n('demo_axis_sftp', '0 0 20 * * ?', false), -- Daily at 8 PM IST\n('demo_pg_api', '0 */30 * * * ?', false) -- Every 30 minutes\nON CONFLICT (source_id) DO NOTHING;\n\n-- =====================================================\n-- FUNCTIONS AND TRIGGERS\n-- =====================================================\n\n-- Update timestamp trigger\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Apply update trigger to tables with updated_at\nCREATE TRIGGER update_data_source_updated_at BEFORE UPDATE ON data_source\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_data_source_secret_updated_at BEFORE UPDATE ON data_source_secret\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_ingest_schedule_updated_at BEFORE UPDATE ON ingest_schedule\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_recon_job_updated_at BEFORE UPDATE ON recon_job\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- Auto-reconciliation trigger function\nCREATE OR REPLACE FUNCTION check_and_trigger_recon()\nRETURNS TRIGGER AS $$\nDECLARE\n    v_pg_exists BOOLEAN;\n    v_bank_exists BOOLEAN;\n    v_recon_exists BOOLEAN;\nBEGIN\n    -- Check if both PG and Bank files exist for the cycle date\n    SELECT EXISTS(\n        SELECT 1 FROM ingest_job \n        WHERE cycle_date = NEW.cycle_date \n        AND source_id IN (SELECT source_id FROM data_source WHERE type LIKE 'PG_%')\n        AND status = 'SUCCEEDED'\n    ) INTO v_pg_exists;\n    \n    SELECT EXISTS(\n        SELECT 1 FROM ingest_job \n        WHERE cycle_date = NEW.cycle_date \n        AND source_id IN (SELECT source_id FROM data_source WHERE type LIKE 'BANK_%')\n        AND status = 'SUCCEEDED'\n    ) INTO v_bank_exists;\n    \n    -- Check if reconciliation already exists\n    SELECT EXISTS(\n        SELECT 1 FROM recon_job \n        WHERE cycle_date = NEW.cycle_date\n    ) INTO v_recon_exists;\n    \n    -- If both files exist and no recon job exists, create one\n    IF v_pg_exists AND v_bank_exists AND NOT v_recon_exists THEN\n        INSERT INTO recon_job (cycle_date, status, created_at)\n        VALUES (NEW.cycle_date, 'PENDING', NOW());\n        \n        RAISE NOTICE 'Auto-triggered reconciliation for cycle date %', NEW.cycle_date;\n    END IF;\n    \n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Create trigger for auto-reconciliation\nCREATE TRIGGER trigger_auto_reconciliation \nAFTER INSERT OR UPDATE OF status ON ingest_job\nFOR EACH ROW \nWHEN (NEW.status = 'SUCCEEDED')\nEXECUTE FUNCTION check_and_trigger_recon();\n\n-- =====================================================\n-- CONNECTOR TABLES (OP-0008)\n-- =====================================================\n\n-- Connector configuration table\nCREATE TABLE recon_connector (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    name TEXT NOT NULL,\n    type TEXT NOT NULL CHECK (type IN ('SFTP', 'API')),\n    provider TEXT NOT NULL CHECK (provider IN ('AXIS', 'BOB', 'HDFC', 'ICICI', 'PG', 'CUSTOM')),\n    merchant_id UUID NULL REFERENCES merchant(id),\n    acquirer_code TEXT NULL,\n    config JSONB NOT NULL, -- host, port, path, pattern, auth, schedule cron, timezone\n    mapping_template_id UUID NULL REFERENCES recon_mapping_template(id),\n    status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'PAUSED')),\n    last_run_at TIMESTAMPTZ,\n    last_ok_at TIMESTAMPTZ,\n    created_at TIMESTAMPTZ DEFAULT NOW(),\n    updated_at TIMESTAMPTZ DEFAULT NOW(),\n    created_by UUID,\n    updated_by UUID,\n    UNIQUE(name)\n);\n\n-- Connector run history\nCREATE TABLE recon_connector_run (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    connector_id UUID NOT NULL REFERENCES recon_connector(id),\n    cycle_date DATE NOT NULL,\n    started_at TIMESTAMPTZ DEFAULT NOW(),\n    finished_at TIMESTAMPTZ,\n    outcome TEXT CHECK (outcome IN ('SUCCESS', 'PARTIAL', 'FAILED')),\n    files_discovered INTEGER DEFAULT 0,\n    files_downloaded INTEGER DEFAULT 0,\n    recon_job_id UUID REFERENCES recon_job(id),\n    error TEXT,\n    metrics JSONB, -- additional runtime metrics\n    created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Ingested files tracking\nCREATE TABLE recon_ingested_file (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    connector_id UUID NOT NULL REFERENCES recon_connector(id),\n    connector_run_id UUID REFERENCES recon_connector_run(id),\n    cycle_date DATE NOT NULL,\n    remote_path TEXT NOT NULL,\n    local_uri TEXT, -- S3/object store URI\n    sha256 TEXT,\n    pgp_verified BOOLEAN DEFAULT FALSE,\n    file_bytes BIGINT,\n    dedupe_key TEXT UNIQUE, -- provider|cycle|sha256\n    state TEXT NOT NULL DEFAULT 'DISCOVERED' CHECK (state IN ('DISCOVERED', 'DOWNLOADED', 'NORMALIZED', 'MATCHED', 'ERROR')),\n    error TEXT,\n    recon_file_id UUID REFERENCES recon_file(id),\n    created_at TIMESTAMPTZ DEFAULT NOW(),\n    updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Indexes for connector tables\nCREATE INDEX idx_recon_connector_status ON recon_connector(status);\nCREATE INDEX idx_recon_connector_provider ON recon_connector(provider);\nCREATE INDEX idx_recon_connector_merchant ON recon_connector(merchant_id);\nCREATE INDEX idx_recon_connector_run_connector ON recon_connector_run(connector_id, cycle_date);\nCREATE INDEX idx_recon_connector_run_outcome ON recon_connector_run(outcome);\nCREATE INDEX idx_recon_ingested_file_connector ON recon_ingested_file(connector_id, cycle_date);\nCREATE INDEX idx_recon_ingested_file_dedupe ON recon_ingested_file(dedupe_key);\nCREATE INDEX idx_recon_ingested_file_state ON recon_ingested_file(state);\n\n-- Connector health metrics view\nCREATE VIEW connector_health AS\nSELECT \n    c.id,\n    c.name,\n    c.type,\n    c.provider,\n    c.status,\n    c.last_run_at,\n    c.last_ok_at,\n    CASE \n        WHEN c.last_ok_at IS NULL THEN 'NEVER_RUN'\n        WHEN c.last_ok_at > NOW() - INTERVAL '1 day' THEN 'HEALTHY'\n        WHEN c.last_ok_at > NOW() - INTERVAL '3 days' THEN 'WARNING'\n        ELSE 'CRITICAL'\n    END as health_status,\n    COUNT(DISTINCT cr.id) as total_runs,\n    COUNT(DISTINCT CASE WHEN cr.outcome = 'SUCCESS' THEN cr.id END) as successful_runs,\n    COUNT(DISTINCT CASE WHEN cr.outcome = 'FAILED' THEN cr.id END) as failed_runs\nFROM recon_connector c\nLEFT JOIN recon_connector_run cr ON c.id = cr.connector_id\nGROUP BY c.id, c.name, c.type, c.provider, c.status, c.last_run_at, c.last_ok_at;\n\n-- =====================================================\n-- REPORT TABLES (OP-0009)\n-- =====================================================\n\n-- Report schedule configuration\nCREATE TABLE IF NOT EXISTS report_schedule (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    type TEXT NOT NULL CHECK (type IN ('SETTLEMENT_SUMMARY', 'BANK_MIS', 'RECON_OUTCOME', 'TAX')),\n    filters JSONB NOT NULL DEFAULT '{}',\n    cadence_cron TEXT NOT NULL,\n    timezone TEXT NOT NULL DEFAULT 'Asia/Kolkata',\n    format TEXT NOT NULL CHECK (format IN ('CSV', 'XLSX')),\n    delivery TEXT NOT NULL CHECK (delivery IN ('EMAIL', 'S3', 'BOTH')),\n    recipients TEXT[] NOT NULL DEFAULT '{}',\n    s3_prefix TEXT,\n    is_enabled BOOLEAN DEFAULT true,\n    last_run_at TIMESTAMP,\n    last_run_status TEXT CHECK (last_run_status IN ('SUCCESS', 'FAILED', 'RUNNING')),\n    next_run_at TIMESTAMP,\n    created_by TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Report export audit trail\nCREATE TABLE IF NOT EXISTS report_export_audit (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    report_type TEXT NOT NULL,\n    filters JSONB NOT NULL,\n    format TEXT NOT NULL,\n    generated_by TEXT NOT NULL,\n    generated_at TIMESTAMP DEFAULT NOW(),\n    object_key TEXT,\n    file_size_bytes BIGINT,\n    row_count INTEGER,\n    signature TEXT,\n    signed_url TEXT,\n    expires_at TIMESTAMP,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Indexes for report tables\nCREATE INDEX idx_report_schedule_type ON report_schedule(type);\nCREATE INDEX idx_report_schedule_enabled ON report_schedule(is_enabled);\nCREATE INDEX idx_report_schedule_next_run ON report_schedule(next_run_at) WHERE is_enabled = true;\nCREATE INDEX idx_report_export_audit_type ON report_export_audit(report_type);\nCREATE INDEX idx_report_export_audit_generated_at ON report_export_audit(generated_at);\nCREATE INDEX idx_report_export_audit_generated_by ON report_export_audit(generated_by);\n\n-- =====================================================\n-- PERMISSIONS\n-- =====================================================\n\n-- Grant permissions to ops_user\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ops_user;\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ops_user;\nGRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO ops_user;",
      "deps": [],
      "materialized": false
    }
  },
  "dependencies": {
    "v_pipeline_overview": [],
    "v_source_breakdown": [],
    "v_top_exception_reasons": [],
    "v_connector_health": [],
    "sp_v2_transactions_v1": [
      "sp_v2_merchants"
    ],
    "sp_v2_settlement_batches": [
      "sp_v2_merchants"
    ],
    "sp_v2_settlement_items": [
      "sp_v2_transactions_v1",
      "sp_v2_settlement_batches"
    ],
    "sp_v2_utr_credits": [
      "sp_v2_bank_files"
    ],
    "sp_v2_recon_matches": [
      "sp_v2_utr_credits",
      "sp_v2_settlement_items"
    ],
    "sp_v2_rolling_reserve_ledger": [
      "sp_v2_merchants",
      "sp_v2_settlement_batches"
    ]
  },
  "endpoints": [
    {
      "method": "POST",
      "path": "/api/upload/multiple",
      "file": "services/api/file-upload-v2.cjs",
      "line": 58,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/upload/single",
      "file": "services/api/file-upload-v2.cjs",
      "line": 111,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/upload/stats",
      "file": "services/api/file-upload-v2.cjs",
      "line": 444,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/health",
      "file": "services/api/file-upload-v2.cjs",
      "line": 467,
      "sql_snippet": "Insert child nodes at the end of the current node.\n     * @param listKey - The key at which the child nodes are stored (usually body).\n     * @param nodes - the nodes to insert.\n     */\n    pushContainer<T extends Node, K extends NodeKeyOfArrays<T>, Nodes extends NodesInsertionParam<NodeListType<T, K>>>(\n        this: NodePath<T>,\n        listKey: K,\n        nodes: Nodes,\n    ): NodePaths<Nodes>;",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:id",
      "file": "services/api/ingest/node_modules/@types/express-serve-static-core/index.d.ts",
      "line": 394,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/api/ingest/node_modules/@types/express-serve-static-core/index.d.ts",
      "line": 797,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "foo",
      "file": "services/api/ingest/node_modules/@types/express-serve-static-core/index.d.ts",
      "line": 1148,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "foo",
      "file": "services/api/ingest/node_modules/@types/express-serve-static-core/index.d.ts",
      "line": 1151,
      "sql_snippet": "delete alias\n\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/api/ingest/node_modules/express/lib/request.js",
      "line": 310,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/api/ingest/node_modules/express/lib/request.js",
      "line": 350,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/api/ingest/node_modules/express/lib/request.js",
      "line": 367,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "subdomain offset",
      "file": "services/api/ingest/node_modules/express/lib/request.js",
      "line": 397,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/api/ingest/node_modules/express/lib/request.js",
      "line": 428,
      "sql_snippet": "update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "etag fn",
      "file": "services/api/ingest/node_modules/express/lib/response.js",
      "line": 179,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/api/ingest/node_modules/express/lib/response.js",
      "line": 268,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/api/ingest/node_modules/express/lib/response.js",
      "line": 269,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/api/ingest/node_modules/express/lib/response.js",
      "line": 270,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/api/ingest/node_modules/express/lib/response.js",
      "line": 311,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/api/ingest/node_modules/express/lib/response.js",
      "line": 312,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/api/ingest/node_modules/express/lib/response.js",
      "line": 313,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "jsonp callback name",
      "file": "services/api/ingest/node_modules/express/lib/response.js",
      "line": 315,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/api/ingest/node_modules/express/lib/response.js",
      "line": 403,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/api/ingest/node_modules/express/lib/response.js",
      "line": 485,
      "sql_snippet": "update we should change the default to this.\n\n  var rState = stream._readableState;",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/",
      "file": "services/api/ingest/node_modules/require-directory/README.markdown",
      "line": 46,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/register",
      "file": "services/api/ingest/node_modules/require-directory/README.markdown",
      "line": 47,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/login",
      "file": "services/api/ingest/node_modules/require-directory/README.markdown",
      "line": 48,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/logout",
      "file": "services/api/ingest/node_modules/require-directory/README.markdown",
      "line": 49,
      "sql_snippet": "Insert mock file expectations\n    await db.query(`\n      INSERT INTO file_expectations (bank, window_start, window_end, business_date, expected_name, expected_seq, required, received, received_at)\n      VALUES \n        ('AXIS', '${today} 11:30:00', '${today} 12:30:00', '${today}', 'AXIS_SETTLE_${today}_01.csv', 1, true, true, NOW() - INTERVAL '3 hours'),\n        ('AXIS', '${today} 15:30:00', '${today} 16:30:00', '${today}', 'AXIS_SETTLE_${today}_02.csv', 2, true, true, NOW() - INTERVAL '2 hours'),\n        ('AXIS', '${today} 20:00:00', '${today} 21:00:00', '${today}', 'AXIS_SETTLE_${today}_03.csv', 3, true, true, NOW() - INTERVAL '30 minutes'),\n        ('HDFC', '${today} 10:00:00', '${today} 10:45:00', '${today}', 'HDFC_SETTLEMENT_${today.replace(/-/g, '')}_001.csv', 1, true, true, NOW() - INTERVAL '4 hours'),\n        ('HDFC', '${today} 14:00:00', '${today} 14:45:00', '${today}', 'HDFC_SETTLEMENT_${today.replace(/-/g, '')}_002.csv', 2, true, true, NOW() - INTERVAL '3 hours'),\n        ('HDFC', '${today} 18:00:00', '${today} 18:45:00', '${today}', 'HDFC_SETTLEMENT_${today.replace(/-/g, '')}_003.csv', 3, true, true, NOW() - INTERVAL '2 hours'),\n        ('HDFC', '${today} 22:00:00', '${today} 22:45:00', '${today}', 'HDFC_SETTLEMENT_${today.replace(/-/g, '')}_004.csv', 4, true, false, NULL),\n        ('ICICI', '${today} 09:30:00', '${today} 11:00:00', '${today}', 'ICICI_${today.replace(/-/g, '')}_SETTLE.csv', null, true, false, NULL),\n        ('ICICI', '${today} 21:30:00', '${today} 23:00:00', '${today}', 'ICICI_${today.replace(/-/g, '')}_SETTLE_EOD.csv', null, true, false, NULL)\n      ON CONFLICT (bank, business_date, expected_name) DO NOTHING\n    `);",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/ingest/health",
      "file": "services/api/ingest/server.js",
      "line": 50,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/ingest/files",
      "file": "services/api/ingest/server.js",
      "line": 75,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/ingest/expectations",
      "file": "services/api/ingest/server.js",
      "line": 89,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "services/api/ingest/server.js",
      "line": 103,
      "sql_snippet": "SELECT \n        bank,\n        last_file_at,\n        expected_count,\n        received_count,\n        lag_minutes,\n        window_status,\n        message,\n        updated_at\n      FROM connector_health\n      ORDER BY bank\n    `).catch(() => ({ rows: mockHealthData }));",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/ingest/configs",
      "file": "services/api/ingest/server.ts",
      "line": 39,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/ingest/health",
      "file": "services/api/ingest/server.ts",
      "line": 62,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/ingest/files",
      "file": "services/api/ingest/server.ts",
      "line": 86,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/ingest/expectations",
      "file": "services/api/ingest/server.ts",
      "line": 129,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/ingest/reconcile",
      "file": "services/api/ingest/server.ts",
      "line": 170,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/ingest/pull-now",
      "file": "services/api/ingest/server.ts",
      "line": 221,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/ingest/alerts",
      "file": "services/api/ingest/server.ts",
      "line": 238,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "services/api/ingest/server.ts",
      "line": 291,
      "sql_snippet": "delete alias\n\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/api/node_modules/express/lib/request.js",
      "line": 310,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/api/node_modules/express/lib/request.js",
      "line": 350,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/api/node_modules/express/lib/request.js",
      "line": 367,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "subdomain offset",
      "file": "services/api/node_modules/express/lib/request.js",
      "line": 397,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/api/node_modules/express/lib/request.js",
      "line": 428,
      "sql_snippet": "update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "etag fn",
      "file": "services/api/node_modules/express/lib/response.js",
      "line": 179,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/api/node_modules/express/lib/response.js",
      "line": 268,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/api/node_modules/express/lib/response.js",
      "line": 269,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/api/node_modules/express/lib/response.js",
      "line": 270,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/api/node_modules/express/lib/response.js",
      "line": 311,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/api/node_modules/express/lib/response.js",
      "line": 312,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/api/node_modules/express/lib/response.js",
      "line": 313,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "jsonp callback name",
      "file": "services/api/node_modules/express/lib/response.js",
      "line": 315,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/api/node_modules/express/lib/response.js",
      "line": 403,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/api/node_modules/express/lib/response.js",
      "line": 485,
      "sql_snippet": "delete cell.v;",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/disputes/kpis",
      "file": "services/chargeback-api/index.js",
      "line": 73,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/disputes/outcome",
      "file": "services/chargeback-api/index.js",
      "line": 126,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/disputes/sla-buckets",
      "file": "services/chargeback-api/index.js",
      "line": 174,
      "sql_snippet": "delete this.settings['trust proxy fn'];",
      "tables": []
    },
    {
      "method": "GET",
      "path": "query parser fn",
      "file": "services/chargeback-api/node_modules/express/lib/request.js",
      "line": 219,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/chargeback-api/node_modules/express/lib/request.js",
      "line": 289,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/chargeback-api/node_modules/express/lib/request.js",
      "line": 329,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/chargeback-api/node_modules/express/lib/request.js",
      "line": 346,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "subdomain offset",
      "file": "services/chargeback-api/node_modules/express/lib/request.js",
      "line": 376,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/chargeback-api/node_modules/express/lib/request.js",
      "line": 407,
      "sql_snippet": "update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "etag fn",
      "file": "services/chargeback-api/node_modules/express/lib/response.js",
      "line": 166,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/chargeback-api/node_modules/express/lib/response.js",
      "line": 240,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/chargeback-api/node_modules/express/lib/response.js",
      "line": 241,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/chargeback-api/node_modules/express/lib/response.js",
      "line": 242,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/chargeback-api/node_modules/express/lib/response.js",
      "line": 268,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/chargeback-api/node_modules/express/lib/response.js",
      "line": 269,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/chargeback-api/node_modules/express/lib/response.js",
      "line": 270,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "jsonp callback name",
      "file": "services/chargeback-api/node_modules/express/lib/response.js",
      "line": 272,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/chargeback-api/node_modules/express/lib/response.js",
      "line": 360,
      "sql_snippet": "SELECT \n          SUM(fees_paise) as commission,\n          SUM(taxes_paise) as gst,\n          SUM(fees_paise) * 0.01 as tds\n        FROM settlements\n        WHERE merchant_id = $1 \n          AND created_at >= CURRENT_DATE - INTERVAL '30 days'\n      `;",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/health/live",
      "file": "services/merchant-api/index.js",
      "line": 111,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/merchant/settlement/schedule",
      "file": "services/merchant-api/index.js",
      "line": 116,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "PUT",
      "path": "/merchant/settlement/schedule",
      "file": "services/merchant-api/index.js",
      "line": 121,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/v1/merchant/dashboard/summary",
      "file": "services/merchant-api/index.js",
      "line": 146,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/v1/merchant/settlements",
      "file": "services/merchant-api/index.js",
      "line": 165,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/v1/merchant/settlements/:settlementId",
      "file": "services/merchant-api/index.js",
      "line": 211,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/v1/merchant/settlements/:settlementId/timeline",
      "file": "services/merchant-api/index.js",
      "line": 245,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/v1/merchant/settlements/instant",
      "file": "services/merchant-api/index.js",
      "line": 327,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/v1/merchant/insights/settlement-trend",
      "file": "services/merchant-api/index.js",
      "line": 372,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/v1/merchant/insights/fees-breakdown",
      "file": "services/merchant-api/index.js",
      "line": 420,
      "sql_snippet": "delete alias\n\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/merchant-api/node_modules/express/lib/request.js",
      "line": 310,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/merchant-api/node_modules/express/lib/request.js",
      "line": 350,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/merchant-api/node_modules/express/lib/request.js",
      "line": 367,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "subdomain offset",
      "file": "services/merchant-api/node_modules/express/lib/request.js",
      "line": 397,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/merchant-api/node_modules/express/lib/request.js",
      "line": 428,
      "sql_snippet": "update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "etag fn",
      "file": "services/merchant-api/node_modules/express/lib/response.js",
      "line": 179,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/merchant-api/node_modules/express/lib/response.js",
      "line": 268,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/merchant-api/node_modules/express/lib/response.js",
      "line": 269,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/merchant-api/node_modules/express/lib/response.js",
      "line": 270,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/merchant-api/node_modules/express/lib/response.js",
      "line": 311,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/merchant-api/node_modules/express/lib/response.js",
      "line": 312,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/merchant-api/node_modules/express/lib/response.js",
      "line": 313,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "jsonp callback name",
      "file": "services/merchant-api/node_modules/express/lib/response.js",
      "line": 315,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/merchant-api/node_modules/express/lib/response.js",
      "line": 403,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/merchant-api/node_modules/express/lib/response.js",
      "line": 485,
      "sql_snippet": "Update {\n  pkg: { name: string;",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/bank/axis/recon",
      "file": "services/mock-bank-api/index.js",
      "line": 60,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/bank/hdfc/recon",
      "file": "services/mock-bank-api/index.js",
      "line": 80,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/bank/icici/recon",
      "file": "services/mock-bank-api/index.js",
      "line": 108,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/bank/:bankName/csv",
      "file": "services/mock-bank-api/index.js",
      "line": 136,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "services/mock-bank-api/index.js",
      "line": 159,
      "sql_snippet": "delete alias\n\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/mock-bank-api/node_modules/express/lib/request.js",
      "line": 310,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/mock-bank-api/node_modules/express/lib/request.js",
      "line": 350,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/mock-bank-api/node_modules/express/lib/request.js",
      "line": 367,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "subdomain offset",
      "file": "services/mock-bank-api/node_modules/express/lib/request.js",
      "line": 397,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/mock-bank-api/node_modules/express/lib/request.js",
      "line": 428,
      "sql_snippet": "update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "etag fn",
      "file": "services/mock-bank-api/node_modules/express/lib/response.js",
      "line": 179,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/mock-bank-api/node_modules/express/lib/response.js",
      "line": 268,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/mock-bank-api/node_modules/express/lib/response.js",
      "line": 269,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/mock-bank-api/node_modules/express/lib/response.js",
      "line": 270,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/mock-bank-api/node_modules/express/lib/response.js",
      "line": 311,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/mock-bank-api/node_modules/express/lib/response.js",
      "line": 312,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/mock-bank-api/node_modules/express/lib/response.js",
      "line": 313,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "jsonp callback name",
      "file": "services/mock-bank-api/node_modules/express/lib/response.js",
      "line": 315,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/mock-bank-api/node_modules/express/lib/response.js",
      "line": 403,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/mock-bank-api/node_modules/express/lib/response.js",
      "line": 485,
      "sql_snippet": "Update {\n  pkg: { name: string;",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/admin/seed",
      "file": "services/mock-pg-api/index.js",
      "line": 102,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/pg/transactions",
      "file": "services/mock-pg-api/index.js",
      "line": 123,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "services/mock-pg-api/index.js",
      "line": 147,
      "sql_snippet": "delete alias\n\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/mock-pg-api/node_modules/express/lib/request.js",
      "line": 310,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/mock-pg-api/node_modules/express/lib/request.js",
      "line": 350,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/mock-pg-api/node_modules/express/lib/request.js",
      "line": 367,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "subdomain offset",
      "file": "services/mock-pg-api/node_modules/express/lib/request.js",
      "line": 397,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/mock-pg-api/node_modules/express/lib/request.js",
      "line": 428,
      "sql_snippet": "update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "etag fn",
      "file": "services/mock-pg-api/node_modules/express/lib/response.js",
      "line": 179,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/mock-pg-api/node_modules/express/lib/response.js",
      "line": 268,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/mock-pg-api/node_modules/express/lib/response.js",
      "line": 269,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/mock-pg-api/node_modules/express/lib/response.js",
      "line": 270,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/mock-pg-api/node_modules/express/lib/response.js",
      "line": 311,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/mock-pg-api/node_modules/express/lib/response.js",
      "line": 312,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/mock-pg-api/node_modules/express/lib/response.js",
      "line": 313,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "jsonp callback name",
      "file": "services/mock-pg-api/node_modules/express/lib/response.js",
      "line": 315,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/mock-pg-api/node_modules/express/lib/response.js",
      "line": 403,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/mock-pg-api/node_modules/express/lib/response.js",
      "line": 485,
      "sql_snippet": "Update {\n  pkg: { name: string;",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/mode-stacked",
      "file": "services/overview-api/analytics-endpoints.js",
      "line": 5,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/gmv-trend-v2",
      "file": "services/overview-api/analytics-endpoints.js",
      "line": 92,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/settlement-failure-pareto",
      "file": "services/overview-api/analytics-endpoints.js",
      "line": 185,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/kpis-v3",
      "file": "services/overview-api/analytics-endpoints.js",
      "line": 301,
      "sql_snippet": "Update KPIs V2 with deltas =====\nfunction createKpisV2WithDeltasEndpoint(app, mockTransactions, mockSettlements, filterTransactions, filterSettlements) {\n  app.get('/api/analytics/kpis-v3', async (req, res) => {\n    const { from, to, merchantId, acquirerId, mode } = req.query;",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/kpis-v2",
      "file": "services/overview-api/analytics-v3-endpoints.js",
      "line": 17,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/mode-stacked",
      "file": "services/overview-api/analytics-v3-endpoints.js",
      "line": 110,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/gmv-trend-v2",
      "file": "services/overview-api/analytics-v3-endpoints.js",
      "line": 175,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/settlement-funnel",
      "file": "services/overview-api/analytics-v3-endpoints.js",
      "line": 257,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/settlement-failure-pareto",
      "file": "services/overview-api/analytics-v3-endpoints.js",
      "line": 324,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/modes/share",
      "file": "services/overview-api/analytics-v3-endpoints.js",
      "line": 394,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/modes/performance",
      "file": "services/overview-api/analytics-v3-endpoints.js",
      "line": 475,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/settlement-failures/breakup",
      "file": "services/overview-api/analytics-v3-endpoints.js",
      "line": 602,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/settlement-failures/performance",
      "file": "services/overview-api/analytics-v3-endpoints.js",
      "line": 638,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/kpis",
      "file": "services/overview-api/index.js",
      "line": 87,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/exceptions/top-reasons",
      "file": "services/overview-api/index.js",
      "line": 147,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/pipeline/summary",
      "file": "services/overview-api/index.js",
      "line": 164,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/exceptions/severity-split",
      "file": "services/overview-api/index.js",
      "line": 208,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/exceptions/top-reasons-detailed",
      "file": "services/overview-api/index.js",
      "line": 238,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/connectors/health-summary",
      "file": "services/overview-api/index.js",
      "line": 258,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/recon-results/:source",
      "file": "services/overview-api/index.js",
      "line": 306,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/recon-sources/summary",
      "file": "services/overview-api/index.js",
      "line": 392,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/overview",
      "file": "services/overview-api/index.js",
      "line": 483,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/ops/overview",
      "file": "services/overview-api/index.js",
      "line": 622,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/disputes/kpis",
      "file": "services/overview-api/index.js",
      "line": 991,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/disputes/outcome-summary",
      "file": "services/overview-api/index.js",
      "line": 1035,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/disputes/sla-buckets",
      "file": "services/overview-api/index.js",
      "line": 1062,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/chargebacks",
      "file": "services/overview-api/index.js",
      "line": 1088,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/chargebacks/:id",
      "file": "services/overview-api/index.js",
      "line": 1134,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/mode-distribution",
      "file": "services/overview-api/index.js",
      "line": 1259,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/gmv-trend",
      "file": "services/overview-api/index.js",
      "line": 1323,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/settlement-funnel",
      "file": "services/overview-api/index.js",
      "line": 1382,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/failure-reasons",
      "file": "services/overview-api/index.js",
      "line": 1521,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/analytics/kpis-v2",
      "file": "services/overview-api/index.js",
      "line": 1615,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/recon-results/manual",
      "file": "services/overview-api/index.js",
      "line": 1694,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/recon-results/connectors",
      "file": "services/overview-api/index.js",
      "line": 1732,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/settlement/pipeline",
      "file": "services/overview-api/index.js",
      "line": 1771,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/settlement/initialize",
      "file": "services/overview-api/index.js",
      "line": 1828,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "services/overview-api/index.js",
      "line": 1854,
      "sql_snippet": "delete alias\n\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/overview-api/node_modules/express/lib/request.js",
      "line": 310,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/overview-api/node_modules/express/lib/request.js",
      "line": 350,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/overview-api/node_modules/express/lib/request.js",
      "line": 367,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "subdomain offset",
      "file": "services/overview-api/node_modules/express/lib/request.js",
      "line": 397,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/overview-api/node_modules/express/lib/request.js",
      "line": 428,
      "sql_snippet": "update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "etag fn",
      "file": "services/overview-api/node_modules/express/lib/response.js",
      "line": 179,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/overview-api/node_modules/express/lib/response.js",
      "line": 268,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/overview-api/node_modules/express/lib/response.js",
      "line": 269,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/overview-api/node_modules/express/lib/response.js",
      "line": 270,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/overview-api/node_modules/express/lib/response.js",
      "line": 311,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/overview-api/node_modules/express/lib/response.js",
      "line": 312,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/overview-api/node_modules/express/lib/response.js",
      "line": 313,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "jsonp callback name",
      "file": "services/overview-api/node_modules/express/lib/response.js",
      "line": 315,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/overview-api/node_modules/express/lib/response.js",
      "line": 403,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/overview-api/node_modules/express/lib/response.js",
      "line": 485,
      "sql_snippet": "Delete = callBound('WeakMap.prototype.delete', true);",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/overview",
      "file": "services/overview-api/overview-v2.js",
      "line": 22,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/health",
      "file": "services/overview-api/overview-v2.js",
      "line": 289,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/stats",
      "file": "services/overview-api/overview-v2.js",
      "line": 299,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/reports/settlements",
      "file": "services/overview-api/overview-v2.js",
      "line": 331,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/reports/bank-mis",
      "file": "services/overview-api/overview-v2.js",
      "line": 402,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/reports/recon-outcome",
      "file": "services/overview-api/overview-v2.js",
      "line": 473,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/reports/tax",
      "file": "services/overview-api/overview-v2.js",
      "line": 548,
      "sql_snippet": "SELECT \n        sb.cycle_date,\n        sb.merchant_id,\n        CONCAT('Merchant ', sb.merchant_id) as merchant_name,\n        sb.gross_amount_paise,\n        sb.total_commission_paise as commission_paise,\n        18.0 as gst_rate_pct,\n        sb.total_gst_paise as gst_amount_paise,\n        2.0 as tds_rate_pct,\n        sb.total_tds_paise as tds_amount_paise,\n        CONCAT('INV-', sb.id) as invoice_number,\n        'AAACR1234M' as pan,\n        '12AAACR1234M1Z5' as gstin\n      FROM sp_v2_settlement_batches sb\n      WHERE sb.status = 'COMPLETED'\n    `;",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/rules",
      "file": "services/overview-api/routes/recon-rules.js",
      "line": 93,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/rules/:id",
      "file": "services/overview-api/routes/recon-rules.js",
      "line": 139,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/rules",
      "file": "services/overview-api/routes/recon-rules.js",
      "line": 148,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "PUT",
      "path": "/rules/:id",
      "file": "services/overview-api/routes/recon-rules.js",
      "line": 172,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/rules/:id/duplicate",
      "file": "services/overview-api/routes/recon-rules.js",
      "line": 201,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/rules/:id/simulate",
      "file": "services/overview-api/routes/recon-rules.js",
      "line": 222,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/rules/:id/publish",
      "file": "services/overview-api/routes/recon-rules.js",
      "line": 255,
      "sql_snippet": "delete descriptor.value\n  delete descriptor.writable\n\n  Object.defineProperty(obj, prop, descriptor)\n\n  return descriptor\n}\n\n/**\n * Create arguments string to keep arity.\n */\n\nfunction createArgumentsString (arity) {\n  var str = ''\n\n  for (var i = 0;",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy",
      "file": "services/pg-ingestion/node_modules/express-rate-limit/dist/index.cjs",
      "line": 159,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy",
      "file": "services/pg-ingestion/node_modules/express-rate-limit/dist/index.cjs",
      "line": 179,
      "sql_snippet": "delete this.hits[key];",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy",
      "file": "services/pg-ingestion/node_modules/express-rate-limit/dist/index.mjs",
      "line": 133,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy",
      "file": "services/pg-ingestion/node_modules/express-rate-limit/dist/index.mjs",
      "line": 153,
      "sql_snippet": "delete alias\n\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/pg-ingestion/node_modules/express/lib/request.js",
      "line": 310,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/pg-ingestion/node_modules/express/lib/request.js",
      "line": 350,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/pg-ingestion/node_modules/express/lib/request.js",
      "line": 367,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "subdomain offset",
      "file": "services/pg-ingestion/node_modules/express/lib/request.js",
      "line": 397,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/pg-ingestion/node_modules/express/lib/request.js",
      "line": 428,
      "sql_snippet": "update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "etag fn",
      "file": "services/pg-ingestion/node_modules/express/lib/response.js",
      "line": 179,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/pg-ingestion/node_modules/express/lib/response.js",
      "line": 268,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/pg-ingestion/node_modules/express/lib/response.js",
      "line": 269,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/pg-ingestion/node_modules/express/lib/response.js",
      "line": 270,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/pg-ingestion/node_modules/express/lib/response.js",
      "line": 311,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/pg-ingestion/node_modules/express/lib/response.js",
      "line": 312,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/pg-ingestion/node_modules/express/lib/response.js",
      "line": 313,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "jsonp callback name",
      "file": "services/pg-ingestion/node_modules/express/lib/response.js",
      "line": 315,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/pg-ingestion/node_modules/express/lib/response.js",
      "line": 403,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/pg-ingestion/node_modules/express/lib/response.js",
      "line": 485,
      "sql_snippet": "Update {\n  pkg: { name: string;",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/webhooks/razorpay",
      "file": "services/pg-ingestion/pg-ingestion-server.cjs",
      "line": 273,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/webhooks/payu",
      "file": "services/pg-ingestion/pg-ingestion-server.cjs",
      "line": 297,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/webhooks/paytm",
      "file": "services/pg-ingestion/pg-ingestion-server.cjs",
      "line": 312,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/trigger-poll/v1",
      "file": "services/pg-ingestion/pg-ingestion-server.cjs",
      "line": 328,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/trigger-poll/:gateway",
      "file": "services/pg-ingestion/pg-ingestion-server.cjs",
      "line": 338,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/stats",
      "file": "services/pg-ingestion/pg-ingestion-server.cjs",
      "line": 349,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "services/pg-ingestion/pg-ingestion-server.cjs",
      "line": 375,
      "sql_snippet": "SELECT \n        gateway,\n        COUNT(*) as total_transactions,\n        COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_transactions,\n        SUM(amount_paise) as total_amount_paise,\n        MAX(updated_at) as last_transaction\n      FROM sp_v2_transactions_v1 \n      WHERE gateway IS NOT NULL\n      GROUP BY gateway\n      ORDER BY total_transactions DESC\n    `);",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/overview",
      "file": "services/recon-api/aggregator-endpoint.js",
      "line": 43,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/events",
      "file": "services/recon-api/index-enhanced.js",
      "line": 26,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/ops/recon/overview",
      "file": "services/recon-api/index-enhanced.js",
      "line": 46,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/ops/recon/items",
      "file": "services/recon-api/index-enhanced.js",
      "line": 74,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/reconcile",
      "file": "services/recon-api/index-enhanced.js",
      "line": 160,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/ops/recon/manual/upload",
      "file": "services/recon-api/index-enhanced.js",
      "line": 255,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/ops/recon/jobs/:id",
      "file": "services/recon-api/index-enhanced.js",
      "line": 308,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/recon/jobs/:id/summary",
      "file": "services/recon-api/index-enhanced.js",
      "line": 319,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/recon/jobs/:id/counts",
      "file": "services/recon-api/index-enhanced.js",
      "line": 410,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/recon/jobs/:id/results",
      "file": "services/recon-api/index-enhanced.js",
      "line": 447,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/reconcile/:id",
      "file": "services/recon-api/index-enhanced.js",
      "line": 673,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/ops/recon/connectors/sync",
      "file": "services/recon-api/index-enhanced.js",
      "line": 684,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "services/recon-api/index-enhanced.js",
      "line": 1019,
      "sql_snippet": "Update job\n    job.progress = 100;",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/recon/run",
      "file": "services/recon-api/index.js",
      "line": 23,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/recon/jobs/:jobId",
      "file": "services/recon-api/index.js",
      "line": 56,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/recon/jobs/:jobId/logs",
      "file": "services/recon-api/index.js",
      "line": 65,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/recon/health",
      "file": "services/recon-api/index.js",
      "line": 74,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/connectors/pg/health",
      "file": "services/recon-api/index.js",
      "line": 100,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/connectors/bank/health",
      "file": "services/recon-api/index.js",
      "line": 132,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/reconcile",
      "file": "services/recon-api/index.js",
      "line": 160,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/reconcile/:id",
      "file": "services/recon-api/index.js",
      "line": 214,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/test",
      "file": "services/recon-api/index.js",
      "line": 224,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/reconcile",
      "file": "services/recon-api/index.js",
      "line": 237,
      "sql_snippet": "delete alias\n\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/recon-api/node_modules/express/lib/request.js",
      "line": 310,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/recon-api/node_modules/express/lib/request.js",
      "line": 350,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/recon-api/node_modules/express/lib/request.js",
      "line": 367,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "subdomain offset",
      "file": "services/recon-api/node_modules/express/lib/request.js",
      "line": 397,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/recon-api/node_modules/express/lib/request.js",
      "line": 428,
      "sql_snippet": "update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "etag fn",
      "file": "services/recon-api/node_modules/express/lib/response.js",
      "line": 179,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/recon-api/node_modules/express/lib/response.js",
      "line": 268,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/recon-api/node_modules/express/lib/response.js",
      "line": 269,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/recon-api/node_modules/express/lib/response.js",
      "line": 270,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/recon-api/node_modules/express/lib/response.js",
      "line": 311,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/recon-api/node_modules/express/lib/response.js",
      "line": 312,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/recon-api/node_modules/express/lib/response.js",
      "line": 313,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "jsonp callback name",
      "file": "services/recon-api/node_modules/express/lib/response.js",
      "line": 315,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/recon-api/node_modules/express/lib/response.js",
      "line": 403,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/recon-api/node_modules/express/lib/response.js",
      "line": 485,
      "sql_snippet": "delete call->baton;",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/recon/jobs/run",
      "file": "services/recon-api/recon-enhanced.js",
      "line": 276,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/recon/jobs/:jobId/summary",
      "file": "services/recon-api/recon-enhanced.js",
      "line": 373,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/recon/jobs/:jobId/counts",
      "file": "services/recon-api/recon-enhanced.js",
      "line": 517,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/recon/jobs/:jobId/results",
      "file": "services/recon-api/recon-enhanced.js",
      "line": 574,
      "sql_snippet": "SELECT * FROM recon_job_results \n    ${whereClause}\n    ORDER BY created_at DESC\n    LIMIT ? OFFSET ?\n  `;",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/jobs/:jobId/summary",
      "file": "services/recon-api/routes/jobRoutes.js",
      "line": 5,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/jobs/:jobId/counts",
      "file": "services/recon-api/routes/jobRoutes.js",
      "line": 73,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/sources/summary",
      "file": "services/recon-api/routes/jobRoutes.js",
      "line": 105,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/jobs/:jobId/results",
      "file": "services/recon-api/routes/jobRoutes.js",
      "line": 169,
      "sql_snippet": "delete alias\n\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/settlement-engine/node_modules/express/lib/request.js",
      "line": 310,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/settlement-engine/node_modules/express/lib/request.js",
      "line": 350,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/settlement-engine/node_modules/express/lib/request.js",
      "line": 367,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "subdomain offset",
      "file": "services/settlement-engine/node_modules/express/lib/request.js",
      "line": 397,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "trust proxy fn",
      "file": "services/settlement-engine/node_modules/express/lib/request.js",
      "line": 428,
      "sql_snippet": "update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');",
      "tables": []
    },
    {
      "method": "GET",
      "path": "etag fn",
      "file": "services/settlement-engine/node_modules/express/lib/response.js",
      "line": 179,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/settlement-engine/node_modules/express/lib/response.js",
      "line": 268,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/settlement-engine/node_modules/express/lib/response.js",
      "line": 269,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/settlement-engine/node_modules/express/lib/response.js",
      "line": 270,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json escape",
      "file": "services/settlement-engine/node_modules/express/lib/response.js",
      "line": 311,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json replacer",
      "file": "services/settlement-engine/node_modules/express/lib/response.js",
      "line": 312,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "json spaces",
      "file": "services/settlement-engine/node_modules/express/lib/response.js",
      "line": 313,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "jsonp callback name",
      "file": "services/settlement-engine/node_modules/express/lib/response.js",
      "line": 315,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/settlement-engine/node_modules/express/lib/response.js",
      "line": 403,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/user/:uid/photos/:file",
      "file": "services/settlement-engine/node_modules/express/lib/response.js",
      "line": 485,
      "sql_snippet": "Delete = callBound('WeakMap.prototype.delete', true);",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/commission-tier/:merchantId",
      "file": "services/settlement-engine/settlement-api.cjs",
      "line": 16,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/calculate-settlement",
      "file": "services/settlement-engine/settlement-api.cjs",
      "line": 39,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/pending-transactions",
      "file": "services/settlement-engine/settlement-api.cjs",
      "line": 73,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "POST",
      "path": "/api/process-settlements",
      "file": "services/settlement-engine/settlement-api.cjs",
      "line": 100,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/settlement-batches",
      "file": "services/settlement-engine/settlement-api.cjs",
      "line": 126,
      "sql_snippet": "",
      "tables": []
    },
    {
      "method": "GET",
      "path": "/api/health",
      "file": "services/settlement-engine/settlement-api.cjs",
      "line": 171,
      "sql_snippet": "Update matched, ensuring it never exceeds total\n    reconResults.matched = Math.max(0, Math.min(\n      reconResults.total,\n      reconResults.matched + matchedChange\n    ));",
      "tables": []
    }
  ],
  "tiles": []
}